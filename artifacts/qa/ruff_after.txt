UP035 `typing.Dict` is deprecated, use `dict` instead
 --> app/components/controls.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import streamlit as st
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/components/controls.py:24:15
   |
22 | def render_controls(
23 |     selected_run_id: str,
24 |     settings: Dict[str, Any],
   |               ^^^^
25 |     filters: Dict[str, Any],
26 | ) -> tuple[Dict[str, Any], str, int, int, int]:
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/components/controls.py:25:14
   |
23 |     selected_run_id: str,
24 |     settings: Dict[str, Any],
25 |     filters: Dict[str, Any],
   |              ^^^^
26 | ) -> tuple[Dict[str, Any], str, int, int, int]:
27 |     """Render pagination and filter controls.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/components/controls.py:26:12
   |
24 |     settings: Dict[str, Any],
25 |     filters: Dict[str, Any],
26 | ) -> tuple[Dict[str, Any], str, int, int, int]:
   |            ^^^^
27 |     """Render pagination and filter controls.
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> app/components/group_list.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import streamlit as st
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> app/components/group_list.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import streamlit as st
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> app/components/group_list.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import streamlit as st
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/components/group_list.py:25:14
   |
23 |     page: int,
24 |     page_size: int,
25 |     filters: Dict[str, Any],
   |              ^^^^
26 | ) -> Tuple[List[Dict[str, Any]], int, int]:
27 |     """Render the paginated group list with fragments.
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> app/components/group_list.py:26:6
   |
24 |     page_size: int,
25 |     filters: Dict[str, Any],
26 | ) -> Tuple[List[Dict[str, Any]], int, int]:
   |      ^^^^^
27 |     """Render the paginated group list with fragments.
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> app/components/group_list.py:26:12
   |
24 |     page_size: int,
25 |     filters: Dict[str, Any],
26 | ) -> Tuple[List[Dict[str, Any]], int, int]:
   |            ^^^^
27 |     """Render the paginated group list with fragments.
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/components/group_list.py:26:17
   |
24 |     page_size: int,
25 |     filters: Dict[str, Any],
26 | ) -> Tuple[List[Dict[str, Any]], int, int]:
   |                 ^^^^
27 |     """Render the paginated group list with fragments.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> app/components/group_list.py:170:14
    |
168 |     page: int,
169 |     page_size: int,
170 |     filters: Dict[str, Any],
    |              ^^^^
171 | ) -> None:
172 |     """Render the group list within a fragment to prevent page-wide blocking.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> app/main.py:38:1
   |
36 | """
37 |
38 | from typing import Any, Dict, List, Optional, cast
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |
40 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> app/main.py:38:1
   |
36 | """
37 |
38 | from typing import Any, Dict, List, Optional, cast
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 |
40 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/main.py:53:24
   |
53 | def load_settings() -> Dict[str, Any]:
   |                        ^^^^
54 |     """Load application settings from config file."""
55 |     try:
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> app/main.py:118:52
    |
118 | def parse_alias_cross_refs(cross_refs_str: str) -> List[Dict[str, Any]]:
    |                                                    ^^^^
119 |     """Parse alias cross-references from string format."""
120 |     if pd.isna(cross_refs_str) or cross_refs_str == "":
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> app/main.py:118:57
    |
118 | def parse_alias_cross_refs(cross_refs_str: str) -> List[Dict[str, Any]]:
    |                                                         ^^^^
119 |     """Parse alias cross-references from string format."""
120 |     if pd.isna(cross_refs_str) or cross_refs_str == "":
    |
help: Replace with `dict`

B007 Loop control variable `i` not used within loop body
   --> app/main.py:269:9
    |
267 |     selected_run_id = None
268 |     selected_run = None
269 |     for i, run in enumerate(sorted_runs):
    |         ^
270 |         display_name = format_run_display_name(run["run_id"], run)
271 |         status_icon = (
    |
help: Rename unused `i` to `_i`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> app/manual_data.py:10:1
   |
 8 | from datetime import datetime
 9 | from pathlib import Path
10 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import streamlit as st
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> app/manual_data.py:10:1
   |
 8 | from datetime import datetime
 9 | from pathlib import Path
10 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import streamlit as st
   |

UP006 Use `list` instead of `List` for type annotation
  --> app/manual_data.py:24:35
   |
24 | def load_manual_dispositions() -> List[Dict[str, Any]]:
   |                                   ^^^^
25 |     """Load manual disposition overrides from JSON file."""
26 |     manual_dir = ensure_manual_directory()
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/manual_data.py:24:40
   |
24 | def load_manual_dispositions() -> List[Dict[str, Any]]:
   |                                        ^^^^
25 |     """Load manual disposition overrides from JSON file."""
26 |     manual_dir = ensure_manual_directory()
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> app/manual_data.py:44:44
   |
44 | def save_manual_dispositions(dispositions: List[Dict[str, Any]]) -> bool:
   |                                            ^^^^
45 |     """Save manual disposition overrides to JSON file."""
46 |     manual_dir = ensure_manual_directory()
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> app/manual_data.py:44:49
   |
44 | def save_manual_dispositions(dispositions: List[Dict[str, Any]]) -> bool:
   |                                                 ^^^^
45 |     """Save manual disposition overrides to JSON file."""
46 |     manual_dir = ensure_manual_directory()
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> app/manual_data.py:91:32
   |
91 | def load_manual_blacklist() -> List[str]:
   |                                ^^^^
92 |     """Load manual blacklist terms from JSON file."""
93 |     manual_dir = ensure_manual_directory()
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> app/manual_data.py:112:34
    |
112 | def save_manual_blacklist(terms: List[str]) -> bool:
    |                                  ^^^^
113 |     """Save manual blacklist terms to JSON file."""
114 |     manual_dir = ensure_manual_directory()
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> deprecated/src/controls_simplified.py:7:1
  |
5 | """
6 |
7 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import streamlit as st
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/controls_simplified.py:24:15
   |
22 | def render_controls_simplified(
23 |     selected_run_id: str,
24 |     settings: Dict[str, Any],
   |               ^^^^
25 |     filters: Dict[str, Any],
26 | ) -> tuple[Dict[str, Any], str, int, int, int]:
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/controls_simplified.py:25:14
   |
23 |     selected_run_id: str,
24 |     settings: Dict[str, Any],
25 |     filters: Dict[str, Any],
   |              ^^^^
26 | ) -> tuple[Dict[str, Any], str, int, int, int]:
27 |     """Render pagination and filter controls using simplified state management.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/controls_simplified.py:26:12
   |
24 |     settings: Dict[str, Any],
25 |     filters: Dict[str, Any],
26 | ) -> tuple[Dict[str, Any], str, int, int, int]:
   |            ^^^^
27 |     """Render pagination and filter controls using simplified state management.
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> deprecated/src/salesforce.py:12:1
   |
10 | import logging
11 | import subprocess
12 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> deprecated/src/salesforce.py:12:1
   |
10 | import logging
11 | import subprocess
12 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  --> deprecated/src/salesforce.py:43:13
   |
41 |             logger.info(f"Salesforce CLI version: {result.stdout.strip()}")
42 |         except (subprocess.CalledProcessError, FileNotFoundError):
43 |             raise RuntimeError("Salesforce CLI not found. Please install it first.")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |
45 |     def _run_command(self, command: List[str]) -> Dict[str, Any]:
   |

UP006 Use `list` instead of `List` for type annotation
  --> deprecated/src/salesforce.py:45:37
   |
43 |             raise RuntimeError("Salesforce CLI not found. Please install it first.")
44 |
45 |     def _run_command(self, command: List[str]) -> Dict[str, Any]:
   |                                     ^^^^
46 |         """Run a Salesforce CLI command.
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/salesforce.py:45:51
   |
43 |             raise RuntimeError("Salesforce CLI not found. Please install it first.")
44 |
45 |     def _run_command(self, command: List[str]) -> Dict[str, Any]:
   |                                                   ^^^^
46 |         """Run a Salesforce CLI command.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/salesforce.py:67:28
   |
65 |             }
66 |
67 |     def list_orgs(self) -> Dict[str, Any]:
   |                            ^^^^
68 |         """List available Salesforce orgs."""
69 |         return self._run_command(["sf", "org", "list"])
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/salesforce.py:71:31
   |
69 |         return self._run_command(["sf", "org", "list"])
70 |
71 |     def get_org_info(self) -> Dict[str, Any]:
   |                               ^^^^
72 |         """Get information about the current/default org."""
73 |         command = ["sf", "org", "display"]
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/salesforce.py:82:17
   |
80 |         object_type: str,
81 |         record_id: str,
82 |         fields: Dict[str, Any],
   |                 ^^^^
83 |     ) -> Dict[str, Any]:
84 |         """Update a single Salesforce record.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> deprecated/src/salesforce.py:83:10
   |
81 |         record_id: str,
82 |         fields: Dict[str, Any],
83 |     ) -> Dict[str, Any]:
   |          ^^^^
84 |         """Update a single Salesforce record.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> deprecated/src/salesforce.py:110:66
    |
108 |         return {"success": True, "message": "Update operation simulated"}
109 |
110 |     def delete_record(self, object_type: str, record_id: str) -> Dict[str, Any]:
    |                                                                  ^^^^
111 |         """Delete a Salesforce record.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> deprecated/src/salesforce.py:129:18
    |
127 |         self,
128 |         object_type: str,
129 |         records: List[Dict[str, Any]],
    |                  ^^^^
130 |     ) -> Dict[str, Any]:
131 |         """Perform batch update of multiple records.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> deprecated/src/salesforce.py:129:23
    |
127 |         self,
128 |         object_type: str,
129 |         records: List[Dict[str, Any]],
    |                       ^^^^
130 |     ) -> Dict[str, Any]:
131 |         """Perform batch update of multiple records.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> deprecated/src/salesforce.py:130:10
    |
128 |         object_type: str,
129 |         records: List[Dict[str, Any]],
130 |     ) -> Dict[str, Any]:
    |          ^^^^
131 |         """Perform batch update of multiple records.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> deprecated/src/salesforce.py:154:6
    |
152 |     object_type: str,
153 |     org_alias: Optional[str] = None,
154 | ) -> Dict[str, Any]:
    |      ^^^^
155 |     """Sync cleaned and merged data back to Salesforce.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> deprecated/src/salesforce.py:176:13
    |
174 |     updates_count = 0
175 |     deletes_count = 0
176 |     errors: List[str] = []
    |             ^^^^
177 |
178 |     # Process master record updates
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> deprecated/src/salesforce.py:181:24
    |
179 |     for _, record in master_records.iterrows():
180 |         # Remove internal columns
181 |         update_fields: Dict[str, Any] = {
    |                        ^^^^
182 |             str(col): val
183 |             for col, val in record.items()
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
 --> deprecated/src/utils/validation_utils.py:4:1
  |
3 | import logging
4 | from typing import List
  | ^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | import pandas as pd
  |

UP006 Use `list` instead of `List` for type annotation
  --> deprecated/src/utils/validation_utils.py:9:60
   |
 9 | def validate_dataframe(df: pd.DataFrame, required_columns: List[str]) -> bool:
   |                                                            ^^^^
10 |     """Validate that DataFrame contains required columns.
   |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> scripts/bench_alias.py:13:1
   |
11 | import time
12 | from pathlib import Path
13 | from typing import Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from src.utils.logging_utils import get_logger
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/bench_alias.py:13:1
   |
11 | import time
12 | from pathlib import Path
13 | from typing import Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from src.utils.logging_utils import get_logger
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> scripts/bench_alias.py:13:1
   |
11 | import time
12 | from pathlib import Path
13 | from typing import Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from src.utils.logging_utils import get_logger
   |

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> scripts/bench_alias.py:26:6
   |
24 |     workers: int = 4,
25 |     output_dir: Path | None = None,
26 | ) -> Tuple[float, Dict]:
   |      ^^^^^
27 |     """Run pipeline with specific alias optimization settings.
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/bench_alias.py:26:19
   |
24 |     workers: int = 4,
25 |     output_dir: Path | None = None,
26 | ) -> Tuple[float, Dict]:
   |                   ^^^^
27 |     """Run pipeline with specific alias optimization settings.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/bench_alias.py:127:43
    |
127 | def parse_alias_stats(log_output: str) -> Dict:
    |                                           ^^^^
128 |     """Parse pipeline logs for alias stage statistics.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/bench_alias.py:158:38
    |
158 | def print_benchmark_results(results: List[Tuple[str, float, Dict]]) -> None:
    |                                      ^^^^
159 |     """Print benchmark results in a formatted table.
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> scripts/bench_alias.py:158:43
    |
158 | def print_benchmark_results(results: List[Tuple[str, float, Dict]]) -> None:
    |                                           ^^^^^
159 |     """Print benchmark results in a formatted table.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/bench_alias.py:158:61
    |
158 | def print_benchmark_results(results: List[Tuple[str, float, Dict]]) -> None:
    |                                                             ^^^^
159 |     """Print benchmark results in a formatted table.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> scripts/benchmark_comparison.py:10:1
   |
 8 | import subprocess
 9 | import time
10 | from typing import Any, Dict, List, cast
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import psutil
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/benchmark_comparison.py:10:1
   |
 8 | import subprocess
 9 | import time
10 | from typing import Any, Dict, List, cast
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import psutil
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/benchmark_comparison.py:102:50
    |
102 | def generate_parquet_size_report(run_id: str) -> Dict[str, Any]:
    |                                                  ^^^^
103 |     """Generate parquet size report for the run."""
104 |     try:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/benchmark_comparison.py:113:22
    |
111 |         pandas_path = f"data/processed/{run_id}_pandas/group_stats_pandas.parquet"
112 |
113 |         size_report: Dict[str, Any] = {
    |                      ^^^^
114 |             "run_id": run_id,
115 |             "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/benchmark_comparison.py:159:6
    |
157 |     persist_artifacts: bool = True,
158 |     run_parity: bool = False,
159 | ) -> Dict[str, Any]:
    |      ^^^^
160 |     """Create a transient settings override for benchmark runs."""
161 |     import yaml
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/benchmark_comparison.py:182:16
    |
180 | def generate_benchmark_report(
181 |     dataset_size: str,
182 |     run_times: List[float],
    |                ^^^^
183 |     run_id: str,
184 |     duckdb_settings: Dict[str, Any],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/benchmark_comparison.py:184:22
    |
182 |     run_times: List[float],
183 |     run_id: str,
184 |     duckdb_settings: Dict[str, Any],
    |                      ^^^^
185 | ) -> str:
186 |     """Generate benchmark report markdown file."""
    |
help: Replace with `dict`

W291 Trailing whitespace
   --> scripts/benchmark_comparison.py:201:52
    |
199 |     benchmark_content = f"""# Phase 1.35.4 Benchmark Report
200 |
201 | **Generated**: {time.strftime("%Y-%m-%d %H:%M:%S")}  
    |                                                    ^^
202 | **Dataset Size**: {dataset_size} ({len(run_times)} runs)  
203 | **Backend**: DuckDB  
    |
help: Remove trailing whitespace

W291 Trailing whitespace
   --> scripts/benchmark_comparison.py:202:57
    |
201 | **Generated**: {time.strftime("%Y-%m-%d %H:%M:%S")}  
202 | **Dataset Size**: {dataset_size} ({len(run_times)} runs)  
    |                                                         ^^
203 | **Backend**: DuckDB  
204 | **Run ID**: {run_id}
    |
help: Remove trailing whitespace

W291 Trailing whitespace
   --> scripts/benchmark_comparison.py:203:20
    |
201 | **Generated**: {time.strftime("%Y-%m-%d %H:%M:%S")}  
202 | **Dataset Size**: {dataset_size} ({len(run_times)} runs)  
203 | **Backend**: DuckDB  
    |                    ^^
204 | **Run ID**: {run_id}
    |
help: Remove trailing whitespace

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> scripts/check_alias_buckets.py:7:1
  |
5 | import logging
6 | from pathlib import Path
7 | from typing import Any, Dict, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> scripts/check_alias_buckets.py:7:1
  |
5 | import logging
6 | from pathlib import Path
7 | from typing import Any, Dict, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> scripts/check_alias_buckets.py:7:1
  |
5 | import logging
6 | from pathlib import Path
7 | from typing import Any, Dict, List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/check_alias_buckets.py:27:51
   |
27 | def analyze_block_sizes(block_stats_path: str) -> Dict[str, Any]:
   |                                                   ^^^^
28 |     """Analyze block size distribution."""
29 |     df = pd.read_csv(block_stats_path)
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> scripts/check_alias_buckets.py:46:6
   |
44 |     optimized_path: str,
45 |     block_stats_path: str,
46 | ) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:
   |      ^^^^^
47 |     """Compare alias matches between legacy and optimized paths."""
48 |     # Load alias matches
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/check_alias_buckets.py:46:12
   |
44 |     optimized_path: str,
45 |     block_stats_path: str,
46 | ) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:
   |            ^^^^
47 |     """Compare alias matches between legacy and optimized paths."""
48 |     # Load alias matches
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> scripts/check_alias_buckets.py:46:28
   |
44 |     optimized_path: str,
45 |     block_stats_path: str,
46 | ) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:
   |                            ^^^^
47 |     """Compare alias matches between legacy and optimized paths."""
48 |     # Load alias matches
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/check_alias_buckets.py:46:33
   |
44 |     optimized_path: str,
45 |     block_stats_path: str,
46 | ) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:
   |                                 ^^^^
47 |     """Compare alias matches between legacy and optimized paths."""
48 |     # Load alias matches
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> scripts/enforce_pyarrow_policy.py:17:1
   |
15 | import sys
16 | from pathlib import Path
17 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 |
19 | # Allowed files that can import PyArrow (but with restrictions)
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/enforce_pyarrow_policy.py:17:1
   |
15 | import sys
16 | from pathlib import Path
17 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
18 |
19 | # Allowed files that can import PyArrow (but with restrictions)
   |

UP006 Use `list` instead of `List` for type annotation
  --> scripts/enforce_pyarrow_policy.py:54:45
   |
54 | def find_pyarrow_imports(file_path: str) -> List[Dict[str, Any]]:
   |                                             ^^^^
55 |     """Find PyArrow imports in a file according to new policy rules.
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/enforce_pyarrow_policy.py:54:50
   |
54 | def find_pyarrow_imports(file_path: str) -> List[Dict[str, Any]]:
   |                                                  ^^^^
55 |     """Find PyArrow imports in a file according to new policy rules.
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> scripts/enforce_pyarrow_policy.py:64:17
   |
63 |     """
64 |     violations: List[Dict[str, Any]] = []
   |                 ^^^^
65 |
66 |     try:
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/enforce_pyarrow_policy.py:64:22
   |
63 |     """
64 |     violations: List[Dict[str, Any]] = []
   |                      ^^^^
65 |
66 |     try:
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/enforce_pyarrow_policy.py:171:39
    |
171 | def scan_directory(directory: str) -> List[Dict[str, Any]]:
    |                                       ^^^^
172 |     """Scan a directory for PyArrow usage violations.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/enforce_pyarrow_policy.py:171:44
    |
171 | def scan_directory(directory: str) -> List[Dict[str, Any]]:
    |                                            ^^^^
172 |     """Scan a directory for PyArrow usage violations.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/enforce_pyarrow_policy.py:181:21
    |
180 |     """
181 |     all_violations: List[Dict[str, Any]] = []
    |                     ^^^^
182 |
183 |     for root, dirs, files in os.walk(directory):
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/enforce_pyarrow_policy.py:181:26
    |
180 |     """
181 |     all_violations: List[Dict[str, Any]] = []
    |                          ^^^^
182 |
183 |     for root, dirs, files in os.walk(directory):
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/enforce_pyarrow_policy.py:203:33
    |
203 | def generate_report(violations: List[Dict[str, Any]]) -> str:
    |                                 ^^^^
204 |     """Generate a human-readable report of violations.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/enforce_pyarrow_policy.py:203:38
    |
203 | def generate_report(violations: List[Dict[str, Any]]) -> str:
    |                                      ^^^^
204 |     """Generate a human-readable report of violations.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> scripts/run_modes_benchmark.py:20:1
   |
18 | import time
19 | from pathlib import Path
20 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |
22 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/run_modes_benchmark.py:37:39
   |
35 |         self.benchmark_dir.mkdir(parents=True, exist_ok=True)
36 |
37 |     def run_duckdb_only_mode(self) -> Dict[str, Any]:
   |                                       ^^^^
38 |         """Test 1: DuckDB-only mode (group_stats.backend=duckdb)."""
39 |         print("🦆 Testing DuckDB-only mode...")
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> scripts/run_modes_benchmark.py:71:34
   |
69 |         }
70 |
71 |     def run_parity_mode(self) -> Dict[str, Any]:
   |                                  ^^^^
72 |         """Test 2: Parity mode (duckdb+pandas; mismatches ≤ 2)."""
73 |         print("🔄 Testing Parity mode...")
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:111:34
    |
109 |         }
110 |
111 |     def run_resume_mode(self) -> Dict[str, Any]:
    |                                  ^^^^
112 |         """Test 3: Resume mode (start, interrupt after groups, resume to end)."""
113 |         print("⏸️ Testing Resume mode...")
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:130:37
    |
128 |         }
129 |
130 |     def run_no_resume_mode(self) -> Dict[str, Any]:
    |                                     ^^^^
131 |         """Test 4: No-resume mode (clean start-to-finish)."""
132 |         print("🚀 Testing No-resume mode...")
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:167:48
    |
165 |         }
166 |
167 |     def run_persistence_override_mode(self) -> Dict[str, Any]:
    |                                                ^^^^
168 |         """Test 5: Persistence override (env CJ_GROUP_STATS_PERSIST_ARTIFACTS=true)."""
169 |         print("💾 Testing Persistence override mode...")
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:207:39
    |
205 |         }
206 |
207 |     def run_benchmark_sanity(self) -> Dict[str, Any]:
    |                                       ^^^^
208 |         """Benchmark sanity: 3 runs on 1k with memoization validation."""
209 |         print("📊 Running Benchmark sanity (3 runs with memoization)...")
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:265:46
    |
263 |         }
264 |
265 |     def _check_artifacts(self, mode: str) -> Dict[str, bool]:
    |                                              ^^^^
266 |         """Check for required artifacts in the run directory."""
267 |         # Find the most recent run directory
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:295:43
    |
293 |         return artifacts
294 |
295 |     def _validate_parity_results(self) -> Dict[str, Any]:
    |                                           ^^^^
296 |         """Validate that parity results meet requirements (≤2 mismatches)."""
297 |         try:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:349:32
    |
347 |                 shutil.rmtree(run_dir)
348 |
349 |     def run_all_tests(self) -> Dict[str, Any]:
    |                                ^^^^
350 |         """Run all tests and collect results."""
351 |         print("🚀 Starting Phase 1.35.7 Run-Modes + Benchmark Sanity Matrix")
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> scripts/run_modes_benchmark.py:372:36
    |
370 |         return self.results
371 |
372 |     def _generate_summary(self) -> Dict[str, Any]:
    |                                    ^^^^
373 |         """Generate summary of all test results."""
374 |         # Count actual test modes (exclude summary)
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
  --> scripts/validate_schema_consistency.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | # Canonical schema constants from schema_utils.py
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> scripts/validate_schema_consistency.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | # Canonical schema constants from schema_utils.py
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> scripts/validate_schema_consistency.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | # Canonical schema constants from schema_utils.py
   |

UP006 Use `set` instead of `Set` for type annotation
  --> scripts/validate_schema_consistency.py:58:48
   |
58 | def find_column_references(file_path: Path) -> Set[str]:
   |                                                ^^^
59 |     """Find all column references in a Python file."""
60 |     try:
   |
help: Replace with `set`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> scripts/validate_schema_consistency.py:76:30
   |
76 | def validate_dtypes_map() -> Tuple[bool, List[str]]:
   |                              ^^^^^
77 |     """Validate that dtypes_map.py uses canonical column names."""
78 |     dtypes_file = Path("src/dtypes_map.py")
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> scripts/validate_schema_consistency.py:76:42
   |
76 | def validate_dtypes_map() -> Tuple[bool, List[str]]:
   |                                          ^^^^
77 |     """Validate that dtypes_map.py uses canonical column names."""
78 |     dtypes_file = Path("src/dtypes_map.py")
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> scripts/validate_schema_consistency.py:116:47
    |
116 | def scan_directory_for_column_references() -> Tuple[bool, List[str], List[str]]:
    |                                               ^^^^^
117 |     """Scan directories for column references and validate against canonical schema."""
118 |     errors = []
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/validate_schema_consistency.py:116:59
    |
116 | def scan_directory_for_column_references() -> Tuple[bool, List[str], List[str]]:
    |                                                           ^^^^
117 |     """Scan directories for column references and validate against canonical schema."""
118 |     errors = []
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> scripts/validate_schema_consistency.py:116:70
    |
116 | def scan_directory_for_column_references() -> Tuple[bool, List[str], List[str]]:
    |                                                                      ^^^^
117 |     """Scan directories for column references and validate against canonical schema."""
118 |     errors = []
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/alias_matching.py:11:1
   |
 9 | from collections import defaultdict
10 | from itertools import zip_longest
11 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import numpy as np
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/alias_matching.py:11:1
   |
 9 | from collections import defaultdict
10 | from itertools import zip_longest
11 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import numpy as np
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/alias_matching.py:11:1
   |
 9 | from collections import defaultdict
10 | from itertools import zip_longest
11 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import numpy as np
   |

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/alias_matching.py:24:6
   |
22 | def _build_first_token_bucket(
23 |     name_core: pd.Series,
24 | ) -> Tuple[Dict[str, np.ndarray], Dict[int, int], Dict[int, int]]:
   |      ^^^^^
25 |     """Build a bucket mapping first tokens to row indices and an index mapping.
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/alias_matching.py:24:12
   |
22 | def _build_first_token_bucket(
23 |     name_core: pd.Series,
24 | ) -> Tuple[Dict[str, np.ndarray], Dict[int, int], Dict[int, int]]:
   |            ^^^^
25 |     """Build a bucket mapping first tokens to row indices and an index mapping.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/alias_matching.py:24:35
   |
22 | def _build_first_token_bucket(
23 |     name_core: pd.Series,
24 | ) -> Tuple[Dict[str, np.ndarray], Dict[int, int], Dict[int, int]]:
   |                                   ^^^^
25 |     """Build a bucket mapping first tokens to row indices and an index mapping.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/alias_matching.py:24:51
   |
22 | def _build_first_token_bucket(
23 |     name_core: pd.Series,
24 | ) -> Tuple[Dict[str, np.ndarray], Dict[int, int], Dict[int, int]]:
   |                                                   ^^^^
25 |     """Build a bucket mapping first tokens to row indices and an index mapping.
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/alias_matching.py:65:53
   |
65 | def _records_with_aliases(df_norm: pd.DataFrame) -> List[Any]:
   |                                                     ^^^^
66 |     """Get sorted list of record indices that have non-empty alias candidates.
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> src/alias_matching.py:78:27
   |
77 |     for idx, record in df_norm.iterrows():
78 |         alias_candidates: List[str] = record.get("alias_candidates", [])
   |                           ^^^^
79 |
80 |         # Handle numpy arrays properly
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/alias_matching.py:97:13
   |
95 |     suffix_class: pd.Series,
96 |     group_id_by_idx: pd.Series,
97 |     bucket: Dict[str, np.ndarray],
   |             ^^^^
98 |     index_map: Dict[int, int],
99 |     reverse_map: Dict[int, int],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:98:16
    |
 96 |     group_id_by_idx: pd.Series,
 97 |     bucket: Dict[str, np.ndarray],
 98 |     index_map: Dict[int, int],
    |                ^^^^
 99 |     reverse_map: Dict[int, int],
100 |     high_threshold: int,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:99:18
    |
 97 |     bucket: Dict[str, np.ndarray],
 98 |     index_map: Dict[int, int],
 99 |     reverse_map: Dict[int, int],
    |                  ^^^^
100 |     high_threshold: int,
101 |     debug: bool = False,
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:102:6
    |
100 |     high_threshold: int,
101 |     debug: bool = False,
102 | ) -> List[Dict[str, Any]]:
    |      ^^^^
103 |     """Process one record's aliases using optimized vectorized approach.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:102:11
    |
100 |     high_threshold: int,
101 |     debug: bool = False,
102 | ) -> List[Dict[str, Any]]:
    |           ^^^^
103 |     """Process one record's aliases using optimized vectorized approach.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:123:23
    |
121 |     """
122 |     record = df_norm.loc[record_id]
123 |     alias_candidates: List[str] = list(record.get("alias_candidates", []))
    |                       ^^^^
124 |     alias_sources: List[str] = list(record.get("alias_sources", []))
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:124:20
    |
122 |     record = df_norm.loc[record_id]
123 |     alias_candidates: List[str] = list(record.get("alias_candidates", []))
124 |     alias_sources: List[str] = list(record.get("alias_sources", []))
    |                    ^^^^
125 |
126 |     # Map record_id to new index space
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:157:14
    |
155 |             normalized_aliases.append(normalized)
156 |
157 |     matches: List[Dict[str, Any]] = []
    |              ^^^^
158 |     record_suffix = suffix_class.loc[record_id]
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:157:19
    |
155 |             normalized_aliases.append(normalized)
156 |
157 |     matches: List[Dict[str, Any]] = []
    |                   ^^^^
158 |     record_suffix = suffix_class.loc[record_id]
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:286:15
    |
284 |     df_norm: pd.DataFrame,
285 |     df_groups: pd.DataFrame,
286 |     settings: Dict[str, Any],
    |               ^^^^
287 |     parallel_executor: Optional[ParallelExecutor] = None,
288 | ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/alias_matching.py:288:6
    |
286 |     settings: Dict[str, Any],
287 |     parallel_executor: Optional[ParallelExecutor] = None,
288 | ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |      ^^^^^
289 |     """Compute alias matches across records.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:288:26
    |
286 |     settings: Dict[str, Any],
287 |     parallel_executor: Optional[ParallelExecutor] = None,
288 | ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |                          ^^^^
289 |     """Compute alias matches across records.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:369:20
    |
368 |     # Initialize alias_matches list
369 |     alias_matches: List[Dict[str, Any]] = []
    |                    ^^^^
370 |
371 |     if can_parallel:
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:369:25
    |
368 |     # Initialize alias_matches list
369 |     alias_matches: List[Dict[str, Any]] = []
    |                         ^^^^
370 |
371 |     if can_parallel:
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:406:55
    |
404 |             _processed_count = 0
405 |
406 |             def process_one_record(record_id: Any) -> List[Dict[str, Any]]:
    |                                                       ^^^^
407 |                 return _process_one_record_optimized(
408 |                     record_id,
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:406:60
    |
404 |             _processed_count = 0
405 |
406 |             def process_one_record(record_id: Any) -> List[Dict[str, Any]]:
    |                                                            ^^^^
407 |                 return _process_one_record_optimized(
408 |                     record_id,
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:472:31
    |
470 |         # Process each record with aliases
471 |         for idx, record in df_norm.iterrows():
472 |             alias_candidates: List[str] = record.get("alias_candidates", [])
    |                               ^^^^
473 |             alias_sources: List[str] = record.get("alias_sources", [])
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:473:28
    |
471 |         for idx, record in df_norm.iterrows():
472 |             alias_candidates: List[str] = record.get("alias_candidates", [])
473 |             alias_sources: List[str] = record.get("alias_sources", [])
    |                            ^^^^
474 |
475 |             # Handle numpy arrays properly
    |
help: Replace with `list`

B007 Loop control variable `i` not used within loop body
   --> src/alias_matching.py:490:17
    |
489 |             # Score each alias against other records' name_core
490 |             for i, (alias, source) in enumerate(zip(normalized_aliases, alias_sources)):
    |                 ^
491 |                 alias_matches.extend(
492 |                     _score_alias_against_records(
    |
help: Rename unused `i` to `_i`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:604:6
    |
602 |     high_threshold: int,
603 |     debug: bool = False,
604 | ) -> List[Dict[str, Any]]:
    |      ^^^^
605 |     """Score an alias against all other records' name_core.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:604:11
    |
602 |     high_threshold: int,
603 |     debug: bool = False,
604 | ) -> List[Dict[str, Any]]:
    |           ^^^^
605 |     """Score an alias against all other records' name_core.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:620:14
    |
619 |     """
620 |     matches: List[Dict[str, Any]] = []
    |              ^^^^
621 |     record_id = record.name
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:620:19
    |
619 |     """
620 |     matches: List[Dict[str, Any]] = []
    |                   ^^^^
621 |     record_id = record.name
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:725:17
    |
724 |     # Group matches by record_id
725 |     cross_refs: Dict[str, List[Dict[str, Any]]] = {}
    |                 ^^^^
726 |     for _, match in df_alias_matches.iterrows():
727 |         record_id = match["record_id"]
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/alias_matching.py:725:27
    |
724 |     # Group matches by record_id
725 |     cross_refs: Dict[str, List[Dict[str, Any]]] = {}
    |                           ^^^^
726 |     for _, match in df_alias_matches.iterrows():
727 |         record_id = match["record_id"]
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/alias_matching.py:725:32
    |
724 |     # Group matches by record_id
725 |     cross_refs: Dict[str, List[Dict[str, Any]]] = {}
    |                                ^^^^
726 |     for _, match in df_alias_matches.iterrows():
727 |         record_id = match["record_id"]
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/cleaning.py:20:1
   |
18 | from datetime import datetime
19 | from pathlib import Path
20 | from typing import Any, Dict, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |
22 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/cleaning.py:126:15
    |
125 | def _create_audit_snapshot(
126 |     settings: Dict[str, Any],
    |               ^^^^
127 |     alias_stats: Dict[str, Any],
128 |     output_dir: str,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/cleaning.py:127:18
    |
125 | def _create_audit_snapshot(
126 |     settings: Dict[str, Any],
127 |     alias_stats: Dict[str, Any],
    |                  ^^^^
128 |     output_dir: str,
129 | ) -> None:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/cleaning.py:410:29
    |
408 |     run_id: Optional[str] = None,
409 |     keep_runs: int = 10,
410 |     col_overrides: Optional[Dict[str, str]] = None,
    |                             ^^^^
411 |     profile: bool = False,
412 | ) -> None:
    |
help: Replace with `dict`

UP031 Use format specifiers instead of percent format
    --> src/cleaning.py:1088:25
     |
1087 |                       logger.info(
1088 | /                         "group_stats | duckdb_complete | elapsed_sec=%.3f | groups=%s | records=%s | "
1089 | |                         "throughput=%s recs/sec | memoize=%s | cache_hit=%s"
1090 | |                         % (
1091 | |                             duckdb_metadata.get("elapsed_sec", 0),
1092 | |                             duckdb_metadata.get("groups"),
1093 | |                             duckdb_metadata.get("records"),
1094 | |                             f"{tp:.0f}",
1095 | |                             duckdb_metadata.get("memoize"),
1096 | |                             duckdb_metadata.get("cache_hit"),
1097 | |                         ),
     | |_________________________^
1098 |                       )
     |
help: Replace with format specifiers

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/disposition.py:12:1
   |
10 | import logging
11 | import re
12 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/disposition.py:12:1
   |
10 | import logging
11 | import re
12 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/disposition.py:64:17
   |
62 | def classify_disposition(
63 |     row: pd.Series,
64 |     group_meta: Dict[str, Any],
   |                 ^^^^
65 |     settings: Dict[str, Any],
66 | ) -> str:
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/disposition.py:65:15
   |
63 |     row: pd.Series,
64 |     group_meta: Dict[str, Any],
65 |     settings: Dict[str, Any],
   |               ^^^^
66 | ) -> str:
67 |     """Classify disposition for a single record.
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/disposition.py:114:33
    |
114 | def _load_manual_blacklist() -> List[str]:
    |                                 ^^^^
115 |     """Load manual blacklist terms from JSON file.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:130:36
    |
130 | def _load_manual_dispositions() -> Dict[str, str]:
    |                                    ^^^^
131 |     """Load manual disposition overrides from JSON file.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:155:44
    |
155 | def get_blacklist_terms(settings: Optional[Dict[str, Any]] = None) -> List[str]:
    |                                            ^^^^
156 |     """Get blacklist terms from configuration or fallback to built-in.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/disposition.py:155:71
    |
155 | def get_blacklist_terms(settings: Optional[Dict[str, Any]] = None) -> List[str]:
    |                                                                       ^^^^
156 |     """Get blacklist terms from configuration or fallback to built-in.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/disposition.py:169:21
    |
167 |         config_blacklist = settings.get("disposition", {}).get("blacklist", {})
168 |         if config_blacklist:
169 |             tokens: List[str] = config_blacklist.get("tokens", [])
    |                     ^^^^
170 |             phrases: List[str] = config_blacklist.get("phrases", [])
171 |             if tokens or phrases:
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/disposition.py:170:22
    |
168 |         if config_blacklist:
169 |             tokens: List[str] = config_blacklist.get("tokens", [])
170 |             phrases: List[str] = config_blacklist.get("phrases", [])
    |                      ^^^^
171 |             if tokens or phrases:
172 |                 logger.info(
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:341:56
    |
341 | def _is_suspicious_singleton(row: pd.Series, settings: Dict[str, Any]) -> bool:
    |                                                        ^^^^
342 |     """Check if a singleton record is suspicious.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:378:56
    |
378 | def compute_group_metadata(df_groups: pd.DataFrame) -> Dict[int, Dict[str, Any]]:
    |                                                        ^^^^
379 |     """Compute metadata for each group.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:378:66
    |
378 | def compute_group_metadata(df_groups: pd.DataFrame) -> Dict[int, Dict[str, Any]]:
    |                                                                  ^^^^
379 |     """Compute metadata for each group.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:421:15
    |
419 | def apply_dispositions(
420 |     df_groups: pd.DataFrame,
421 |     settings: Dict[str, Any],
    |               ^^^^
422 | ) -> pd.DataFrame:
423 |     """Apply disposition classification to all records.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:455:15
    |
453 | def _apply_dispositions_vectorized(
454 |     df_groups: pd.DataFrame,
455 |     settings: Dict[str, Any],
    |               ^^^^
456 | ) -> pd.DataFrame:
457 |     """Apply disposition classification using vectorized operations (np.select).
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:640:15
    |
638 | def _apply_dispositions_legacy(
639 |     df_groups: pd.DataFrame,
640 |     settings: Dict[str, Any],
    |               ^^^^
641 | ) -> pd.DataFrame:
642 |     """Legacy disposition classification using iterrows (fallback).
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:739:17
    |
737 | def get_disposition_reason(
738 |     row: pd.Series,
739 |     group_meta: Dict[str, Any],
    |                 ^^^^
740 |     settings: Dict[str, Any],
741 | ) -> str:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:740:15
    |
738 |     row: pd.Series,
739 |     group_meta: Dict[str, Any],
740 |     settings: Dict[str, Any],
    |               ^^^^
741 | ) -> str:
742 |     """Get the reason for a disposition classification.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:791:21
    |
789 | def _generate_disposition_reasons_vectorized(
790 |     df: pd.DataFrame,
791 |     group_metadata: Dict[int, Dict[str, Any]],
    |                     ^^^^
792 |     blacklist_mask: pd.Series,
793 |     manual_overrides: Dict[str, str],
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:791:31
    |
789 | def _generate_disposition_reasons_vectorized(
790 |     df: pd.DataFrame,
791 |     group_metadata: Dict[int, Dict[str, Any]],
    |                               ^^^^
792 |     blacklist_mask: pd.Series,
793 |     manual_overrides: Dict[str, str],
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:793:23
    |
791 |     group_metadata: Dict[int, Dict[str, Any]],
792 |     blacklist_mask: pd.Series,
793 |     manual_overrides: Dict[str, str],
    |                       ^^^^
794 |     settings: Dict[str, Any],
795 | ) -> pd.Series:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/disposition.py:794:15
    |
792 |     blacklist_mask: pd.Series,
793 |     manual_overrides: Dict[str, str],
794 |     settings: Dict[str, Any],
    |               ^^^^
795 | ) -> pd.Series:
796 |     """Generate disposition reasons using vectorized operations.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/dtypes_map.py:7:1
  |
5 | """
6 |
7 | from typing import Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | # Central dtype mapping for all pipeline dataframes
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/dtypes_map.py:110:48
    |
110 | def get_dtypes_for_schema(schema_name: str) -> Dict[str, str]:
    |                                                ^^^^
111 |     """Get dtype mapping for specific pipeline schema.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/grouping.py:11:1
   |
 9 | import logging
10 | from collections import defaultdict
11 | from typing import Any, Callable, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/grouping.py:11:1
   |
 9 | import logging
10 | from collections import defaultdict
11 | from typing import Any, Callable, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> src/grouping.py:11:1
   |
 9 | import logging
10 | from collections import defaultdict
11 | from typing import Any, Callable, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/grouping.py:11:1
   |
 9 | import logging
10 | from collections import defaultdict
11 | from typing import Any, Callable, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP006 Use `list` instead of `List` for type annotation
  --> src/grouping.py:23:35
   |
21 |     from src.utils.hash_utils import stable_group_id as _stable_group_id
22 |
23 |     StableGroupIdFunc = Callable[[List[str], Dict[str, Any]], str]
   |                                   ^^^^
24 |     stable_group_id: Optional[StableGroupIdFunc] = _stable_group_id
25 | except Exception:  # pragma: no cover
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/grouping.py:23:46
   |
21 |     from src.utils.hash_utils import stable_group_id as _stable_group_id
22 |
23 |     StableGroupIdFunc = Callable[[List[str], Dict[str, Any]], str]
   |                                              ^^^^
24 |     stable_group_id: Optional[StableGroupIdFunc] = _stable_group_id
25 | except Exception:  # pragma: no cover
   |
help: Replace with `dict`

UP045 Use `X | None` for type annotations
  --> src/grouping.py:24:22
   |
23 |     StableGroupIdFunc = Callable[[List[str], Dict[str, Any]], str]
24 |     stable_group_id: Optional[StableGroupIdFunc] = _stable_group_id
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 | except Exception:  # pragma: no cover
26 |     stable_group_id = None
   |
help: Convert to `X | None`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/grouping.py:36:18
   |
34 |     primary_id: str,
35 |     candidate_id: str,
36 |     edge_scores: Dict[Tuple[str, str], float],
   |                  ^^^^
37 |     token_sets: Dict[str, Set[str]],
38 |     config: Dict[str, Any],
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/grouping.py:36:23
   |
34 |     primary_id: str,
35 |     candidate_id: str,
36 |     edge_scores: Dict[Tuple[str, str], float],
   |                       ^^^^^
37 |     token_sets: Dict[str, Set[str]],
38 |     config: Dict[str, Any],
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/grouping.py:37:17
   |
35 |     candidate_id: str,
36 |     edge_scores: Dict[Tuple[str, str], float],
37 |     token_sets: Dict[str, Set[str]],
   |                 ^^^^
38 |     config: Dict[str, Any],
39 |     stop_tokens: Set[str],
   |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
  --> src/grouping.py:37:27
   |
35 |     candidate_id: str,
36 |     edge_scores: Dict[Tuple[str, str], float],
37 |     token_sets: Dict[str, Set[str]],
   |                           ^^^
38 |     config: Dict[str, Any],
39 |     stop_tokens: Set[str],
   |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/grouping.py:38:13
   |
36 |     edge_scores: Dict[Tuple[str, str], float],
37 |     token_sets: Dict[str, Set[str]],
38 |     config: Dict[str, Any],
   |             ^^^^
39 |     stop_tokens: Set[str],
40 | ) -> Tuple[bool, str, float]:
   |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
  --> src/grouping.py:39:18
   |
37 |     token_sets: Dict[str, Set[str]],
38 |     config: Dict[str, Any],
39 |     stop_tokens: Set[str],
   |                  ^^^
40 | ) -> Tuple[bool, str, float]:
41 |     """Determine if a candidate can join a group based on edge-gating rules.
   |
help: Replace with `set`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/grouping.py:40:6
   |
38 |     config: Dict[str, Any],
39 |     stop_tokens: Set[str],
40 | ) -> Tuple[bool, str, float]:
   |      ^^^^^
41 |     """Determine if a candidate can join a group based on edge-gating rules.
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/grouping.py:93:18
   |
91 |     primary_id: str,
92 |     candidate_id: str,
93 |     edge_scores: Dict[Tuple[str, str], float],
   |                  ^^^^
94 |     config: Dict[str, Any],
95 | ) -> bool:
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/grouping.py:93:23
   |
91 |     primary_id: str,
92 |     candidate_id: str,
93 |     edge_scores: Dict[Tuple[str, str], float],
   |                       ^^^^^
94 |     config: Dict[str, Any],
95 | ) -> bool:
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/grouping.py:94:13
   |
92 |     candidate_id: str,
93 |     edge_scores: Dict[Tuple[str, str], float],
94 |     config: Dict[str, Any],
   |             ^^^^
95 | ) -> bool:
96 |     """Apply canopy bound to prevent oversized groups.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:139:13
    |
137 |     accounts_df: pd.DataFrame,
138 |     candidate_pairs_df: pd.DataFrame,
139 |     config: Dict[str, Any],
    |             ^^^^
140 |     stop_tokens: Set[str],
141 |     enable_progress: bool = False,
    |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
   --> src/grouping.py:140:18
    |
138 |     candidate_pairs_df: pd.DataFrame,
139 |     config: Dict[str, Any],
140 |     stop_tokens: Set[str],
    |                  ^^^
141 |     enable_progress: bool = False,
142 |     profile: bool = False,
    |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:250:18
    |
249 |     # Prepare data structures
250 |     edge_scores: Dict[Tuple[str, str], float] = {}
    |                  ^^^^
251 |     token_sets: Dict[str, Set[str]] = {}
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/grouping.py:250:23
    |
249 |     # Prepare data structures
250 |     edge_scores: Dict[Tuple[str, str], float] = {}
    |                       ^^^^^
251 |     token_sets: Dict[str, Set[str]] = {}
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:251:17
    |
249 |     # Prepare data structures
250 |     edge_scores: Dict[Tuple[str, str], float] = {}
251 |     token_sets: Dict[str, Set[str]] = {}
    |                 ^^^^
252 |
253 |     # Build edge scores dict
    |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
   --> src/grouping.py:251:27
    |
249 |     # Prepare data structures
250 |     edge_scores: Dict[Tuple[str, str], float] = {}
251 |     token_sets: Dict[str, Set[str]] = {}
    |                           ^^^
252 |
253 |     # Build edge scores dict
    |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:355:17
    |
353 |     if not maintain_unionfind_size:
354 |         # Standard Union-Find structure
355 |         parent: Dict[str, str] = {}
    |                 ^^^^
356 |         rank: Dict[str, int] = {}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:356:15
    |
354 |         # Standard Union-Find structure
355 |         parent: Dict[str, str] = {}
356 |         rank: Dict[str, int] = {}
    |               ^^^^
357 |
358 |         def find(x: str) -> str:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:394:20
    |
393 |     # Group membership tracking (move this ABOVE any use)
394 |     group_members: Dict[str, List[str]] = defaultdict(list)
    |                    ^^^^
395 |     explain_metadata: Dict[str, Dict[str, Any]] = {}
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/grouping.py:394:30
    |
393 |     # Group membership tracking (move this ABOVE any use)
394 |     group_members: Dict[str, List[str]] = defaultdict(list)
    |                              ^^^^
395 |     explain_metadata: Dict[str, Dict[str, Any]] = {}
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:395:23
    |
393 |     # Group membership tracking (move this ABOVE any use)
394 |     group_members: Dict[str, List[str]] = defaultdict(list)
395 |     explain_metadata: Dict[str, Dict[str, Any]] = {}
    |                       ^^^^
396 |
397 |     # Phase 1.35.2: Fast-path union of exact equals pairs first
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:395:33
    |
393 |     # Group membership tracking (move this ABOVE any use)
394 |     group_members: Dict[str, List[str]] = defaultdict(list)
395 |     explain_metadata: Dict[str, Dict[str, Any]] = {}
    |                                 ^^^^
396 |
397 |     # Phase 1.35.2: Fast-path union of exact equals pairs first
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/grouping.py:574:18
    |
573 |     # Build final groups dataframe
574 |     groups_data: List[Dict[str, Any]] = []
    |                  ^^^^
575 |
576 |     for account_id in accounts_df["account_id"]:
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:574:23
    |
573 |     # Build final groups dataframe
574 |     groups_data: List[Dict[str, Any]] = []
    |                       ^^^^
575 |
576 |     for account_id in accounts_df["account_id"]:
    |
help: Replace with `dict`

UP045 Use `X | None` for type annotations
   --> src/grouping.py:610:36
    |
609 |         OptimizeFunc = Callable[[pd.DataFrame, str], pd.DataFrame]
610 |         optimize_dataframe_memory: Optional[OptimizeFunc] = _opt_df_mem
    |                                    ^^^^^^^^^^^^^^^^^^^^^^
611 |     except Exception:
612 |         optimize_dataframe_memory = None  # pragma: no cover
    |
help: Convert to `X | None`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:627:13
    |
625 |     accounts_df: pd.DataFrame,
626 |     candidate_pairs_df: pd.DataFrame,
627 |     config: Dict[str, Any],
    |             ^^^^
628 | ) -> pd.DataFrame:
629 |     """Create groups using standard connected components logic (fallback).
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:643:13
    |
642 |     # Standard Union-Find implementation
643 |     parent: Dict[str, str] = {}
    |             ^^^^
644 |     rank: Dict[str, int] = {}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:644:11
    |
642 |     # Standard Union-Find implementation
643 |     parent: Dict[str, str] = {}
644 |     rank: Dict[str, int] = {}
    |           ^^^^
645 |
646 |     def find(x: str) -> str:
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/grouping.py:690:18
    |
689 |     # Build groups
690 |     groups_data: List[Dict[str, Any]] = []
    |                  ^^^^
691 |     group_members: Dict[str, List[str]] = defaultdict(list)
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:690:23
    |
689 |     # Build groups
690 |     groups_data: List[Dict[str, Any]] = []
    |                       ^^^^
691 |     group_members: Dict[str, List[str]] = defaultdict(list)
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/grouping.py:691:20
    |
689 |     # Build groups
690 |     groups_data: List[Dict[str, Any]] = []
691 |     group_members: Dict[str, List[str]] = defaultdict(list)
    |                    ^^^^
692 |
693 |     for account_id in accounts_df["account_id"]:
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/grouping.py:691:30
    |
689 |     # Build groups
690 |     groups_data: List[Dict[str, Any]] = []
691 |     group_members: Dict[str, List[str]] = defaultdict(list)
    |                              ^^^^
692 |
693 |     for account_id in accounts_df["account_id"]:
    |
help: Replace with `list`

UP045 Use `X | None` for type annotations
   --> src/grouping.py:725:36
    |
724 |         OptimizeFunc = Callable[[pd.DataFrame, str], pd.DataFrame]
725 |         optimize_dataframe_memory: Optional[OptimizeFunc] = _opt_df_mem
    |                                    ^^^^^^^^^^^^^^^^^^^^^^
726 |     except Exception:
727 |         optimize_dataframe_memory = None  # pragma: no cover
    |
help: Convert to `X | None`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/manual_io.py:11:1
   |
 9 | from datetime import datetime
10 | from pathlib import Path
11 | from typing import Any, Dict, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> src/manual_io.py:11:1
   |
 9 | from datetime import datetime
10 | from pathlib import Path
11 | from typing import Any, Dict, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | logger = logging.getLogger(__name__)
   |

UP006 Use `set` instead of `Set` for type annotation
  --> src/manual_io.py:57:79
   |
57 | def load_manual_blacklist(path: str = "data/manual/manual_blacklist.json") -> Set[str]:
   |                                                                               ^^^
58 |     """Load manual blacklist terms from JSON file.
   |
help: Replace with `set`

UP006 Use `set` instead of `Set` for type annotation
  --> src/manual_io.py:83:12
   |
82 | def save_manual_blacklist(
83 |     terms: Set[str],
   |            ^^^
84 |     path: str = "data/manual/manual_blacklist.json",
85 | ) -> bool:
   |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/manual_io.py:106:6
    |
104 | def load_manual_overrides(
105 |     path: str = "data/manual/manual_dispositions.json",
106 | ) -> Dict[str, Dict[str, Any]]:
    |      ^^^^
107 |     """Load manual disposition overrides from JSON file.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/manual_io.py:106:16
    |
104 | def load_manual_overrides(
105 |     path: str = "data/manual/manual_dispositions.json",
106 | ) -> Dict[str, Dict[str, Any]]:
    |                ^^^^
107 |     """Load manual disposition overrides from JSON file.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/manual_io.py:127:28
    |
125 |         # Convert list to dict if needed (backward compatibility)
126 |         if isinstance(overrides, list):
127 |             override_dict: Dict[str, Dict[str, Any]] = {}
    |                            ^^^^
128 |             for override in overrides:
129 |                 if isinstance(override, dict):
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/manual_io.py:127:38
    |
125 |         # Convert list to dict if needed (backward compatibility)
126 |         if isinstance(overrides, list):
127 |             override_dict: Dict[str, Dict[str, Any]] = {}
    |                                      ^^^^
128 |             for override in overrides:
129 |                 if isinstance(override, dict):
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/manual_io.py:149:16
    |
148 | def save_manual_overrides(
149 |     overrides: Dict[str, Dict[str, Any]],
    |                ^^^^
150 |     path: str = "data/manual/manual_dispositions.json",
151 | ) -> bool:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/manual_io.py:149:26
    |
148 | def save_manual_overrides(
149 |     overrides: Dict[str, Dict[str, Any]],
    |                          ^^^^
150 |     path: str = "data/manual/manual_dispositions.json",
151 | ) -> bool:
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/normalize.py:13:1
   |
11 | import re
12 | from dataclasses import dataclass
13 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/normalize.py:13:1
   |
11 | import re
12 | from dataclasses import dataclass
13 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import pandas as pd
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> src/normalize.py:13:1
   |
11 | import re
12 | from dataclasses import dataclass
13 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import pandas as pd
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/normalize.py:13:1
   |
11 | import re
12 | from dataclasses import dataclass
13 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import pandas as pd
   |

UP006 Use `list` instead of `List` for type annotation
  --> src/normalize.py:35:23
   |
33 |     has_semicolon: bool
34 |     has_multiple_names: bool
35 |     alias_candidates: List[str]
   |                       ^^^^
36 |     alias_sources: List[str]
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> src/normalize.py:36:20
   |
34 |     has_multiple_names: bool
35 |     alias_candidates: List[str]
36 |     alias_sources: List[str]
   |                    ^^^^
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/normalize.py:275:45
    |
275 | def _extract_alias_candidates(name: str) -> Tuple[List[str], List[str]]:
    |                                             ^^^^^
276 |     """Extract alias candidates from a name string.
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/normalize.py:275:51
    |
275 | def _extract_alias_candidates(name: str) -> Tuple[List[str], List[str]]:
    |                                                   ^^^^
276 |     """Extract alias candidates from a name string.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/normalize.py:275:62
    |
275 | def _extract_alias_candidates(name: str) -> Tuple[List[str], List[str]]:
    |                                                              ^^^^
276 |     """Extract alias candidates from a name string.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/normalize.py:367:40
    |
367 | def extract_suffix_from_tokens(tokens: List[str]) -> Tuple[str, str]:
    |                                        ^^^^
368 |     """Extract legal suffix from tokenized name.
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/normalize.py:367:54
    |
367 | def extract_suffix_from_tokens(tokens: List[str]) -> Tuple[str, str]:
    |                                                      ^^^^^
368 |     """Extract legal suffix from tokenized name.
    |
help: Replace with `tuple`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/normalize.py:391:39
    |
391 | def extract_suffix(name_base: str) -> Tuple[str, str]:
    |                                       ^^^^^
392 |     """Extract legal suffix from normalized base name.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/normalize.py:506:6
    |
504 | def load_normalization_settings(
505 |     config_path: str = "config/settings.yaml",
506 | ) -> Dict[str, Any]:
    |      ^^^^
507 |     """Load normalization settings from config file."""
508 |     global _normalization_settings
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/normalize.py:525:24
    |
523 | def enhance_name_core(
524 |     name_core: str,
525 |     settings: Optional[Dict[str, Any]] = None,
    |                        ^^^^
526 | ) -> Tuple[str, Set[str]]:
527 |     """Apply enhanced normalization to name_core for better retail brand matching.
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/normalize.py:526:6
    |
524 |     name_core: str,
525 |     settings: Optional[Dict[str, Any]] = None,
526 | ) -> Tuple[str, Set[str]]:
    |      ^^^^^
527 |     """Apply enhanced normalization to name_core for better retail brand matching.
    |
help: Replace with `tuple`

UP006 Use `set` instead of `Set` for type annotation
   --> src/normalize.py:526:17
    |
524 |     name_core: str,
525 |     settings: Optional[Dict[str, Any]] = None,
526 | ) -> Tuple[str, Set[str]]:
    |                 ^^^
527 |     """Apply enhanced normalization to name_core for better retail brand matching.
    |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/normalize.py:581:24
    |
579 | def get_enhanced_tokens_for_jaccard(
580 |     name_core: str,
581 |     settings: Optional[Dict[str, Any]] = None,
    |                        ^^^^
582 | ) -> Set[str]:
583 |     """Get token set for Jaccard calculation, excluding weak tokens.
    |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
   --> src/normalize.py:582:6
    |
580 |     name_core: str,
581 |     settings: Optional[Dict[str, Any]] = None,
582 | ) -> Set[str]:
    |      ^^^
583 |     """Get token set for Jaccard calculation, excluding weak tokens.
    |
help: Replace with `set`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/performance.py:12:1
   |
10 | import tracemalloc
11 | from datetime import datetime, timezone
12 | from typing import Any, Callable, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/performance.py:12:1
   |
10 | import tracemalloc
11 | from datetime import datetime, timezone
12 | from typing import Any, Callable, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:19:26
   |
17 |     from src.utils.hash_utils import stable_schema_hash as _stable_schema_hash
18 |
19 |     HashFunc = Callable[[Dict[str, Any]], str]
   |                          ^^^^
20 |     stable_schema_hash: Optional[HashFunc] = _stable_schema_hash
21 | except ImportError:
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:33:23
   |
31 |         self.start_time: Optional[datetime] = None
32 |         self.end_time: Optional[datetime] = None
33 |         self.timings: Dict[str, float] = {}
   |                       ^^^^
34 |         self.memory_snapshots: List[Any] = []
35 |         self.peak_memory: float = 0.0
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/performance.py:34:32
   |
32 |         self.end_time: Optional[datetime] = None
33 |         self.timings: Dict[str, float] = {}
34 |         self.memory_snapshots: List[Any] = []
   |                                ^^^^
35 |         self.peak_memory: float = 0.0
36 |         self.config_hash: Optional[str] = None
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:38:38
   |
36 |         self.config_hash: Optional[str] = None
37 |
38 |     def start_run(self, config_dict: Dict[str, Any]) -> None:
   |                                      ^^^^
39 |         """Start tracking performance for a pipeline run."""
40 |         self.start_time = datetime.now(timezone.utc)
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:76:24
   |
74 |     def generate_summary(
75 |         self,
76 |         dataset_stats: Dict[str, int],
   |                        ^^^^
77 |         candidate_stats: Dict[str, int],
78 |         group_stats: Dict[str, Any],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:77:26
   |
75 |         self,
76 |         dataset_stats: Dict[str, int],
77 |         candidate_stats: Dict[str, int],
   |                          ^^^^
78 |         group_stats: Dict[str, Any],
79 |         block_stats: Dict[str, Any],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:78:22
   |
76 |         dataset_stats: Dict[str, int],
77 |         candidate_stats: Dict[str, int],
78 |         group_stats: Dict[str, Any],
   |                      ^^^^
79 |         block_stats: Dict[str, Any],
80 |     ) -> Dict[str, Any]:
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:79:22
   |
77 |         candidate_stats: Dict[str, int],
78 |         group_stats: Dict[str, Any],
79 |         block_stats: Dict[str, Any],
   |                      ^^^^
80 |     ) -> Dict[str, Any]:
81 |         """Generate comprehensive performance summary.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/performance.py:80:10
   |
78 |         group_stats: Dict[str, Any],
79 |         block_stats: Dict[str, Any],
80 |     ) -> Dict[str, Any]:
   |          ^^^^
81 |         """Generate comprehensive performance summary.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/performance.py:139:14
    |
138 | def save_performance_summary(
139 |     summary: Dict[str, Any],
    |              ^^^^
140 |     output_path: str = "data/processed/perf_summary.json",
141 | ) -> None:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/performance.py:158:62
    |
158 | def compute_group_size_histogram(groups_df: pd.DataFrame) -> Dict[str, int]:
    |                                                              ^^^^
159 |     """Compute group size histogram from groups dataframe.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/performance.py:197:6
    |
195 |     blocks_df: pd.DataFrame,
196 |     top_n: int = 10,
197 | ) -> List[Dict[str, Any]]:
    |      ^^^^
198 |     """Compute top tokens from blocking statistics.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/performance.py:197:11
    |
195 |     blocks_df: pd.DataFrame,
196 |     top_n: int = 10,
197 | ) -> List[Dict[str, Any]]:
    |           ^^^^
198 |     """Compute top tokens from blocking statistics.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/similarity/__init__.py:7:1
  |
6 | import logging
7 | from typing import Any, Dict, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

F401 `typing.Any` imported but unused
 --> src/similarity/__init__.py:7:20
  |
6 | import logging
7 | from typing import Any, Dict, Optional
  |                    ^^^
8 |
9 | import pandas as pd
  |
help: Remove unused import: `typing.Any`

F401 `src.utils.parallel_utils.ParallelExecutor` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  --> src/similarity/__init__.py:13:38
   |
11 | from src.utils.duckdb_utils import ensure_pandas_strings
12 | from src.utils.parallel_protocols import ExecutorLike
13 | from src.utils.parallel_utils import ParallelExecutor
   |                                      ^^^^^^^^^^^^^^^^
14 |
15 | from .blocking import generate_candidate_pairs_soft_ban, get_stop_tokens
   |
help: Add unused import `ParallelExecutor` to __all__

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/__init__.py:24:15
   |
22 | def pair_scores(
23 |     df_norm: pd.DataFrame,
24 |     settings: Dict,
   |               ^^^^
25 |     enable_progress: bool = False,
26 |     parallel_executor: Optional[ExecutorLike] = None,
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/similarity/blocking.py:5:1
  |
3 | import logging
4 | from itertools import combinations
5 | from typing import Any, Dict, List, Optional, Set, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | import pandas as pd
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/similarity/blocking.py:5:1
  |
3 | import logging
4 | from itertools import combinations
5 | from typing import Any, Dict, List, Optional, Set, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | import pandas as pd
  |

UP035 `typing.Set` is deprecated, use `set` instead
 --> src/similarity/blocking.py:5:1
  |
3 | import logging
4 | from itertools import combinations
5 | from typing import Any, Dict, List, Optional, Set, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | import pandas as pd
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/similarity/blocking.py:5:1
  |
3 | import logging
4 | from itertools import combinations
5 | from typing import Any, Dict, List, Optional, Set, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/blocking.py:16:31
   |
16 | def get_stop_tokens(settings: Dict[str, Any]) -> Set[str]:
   |                               ^^^^
17 |     """Get stop tokens from configuration."""
18 |     blocking_settings = settings.get("similarity", {}).get("blocking", {})
   |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
  --> src/similarity/blocking.py:16:50
   |
16 | def get_stop_tokens(settings: Dict[str, Any]) -> Set[str]:
   |                                                  ^^^
17 |     """Get stop tokens from configuration."""
18 |     blocking_settings = settings.get("similarity", {}).get("blocking", {})
   |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/blocking.py:28:24
   |
26 |     parallel_executor: Optional[ExecutorLike] = None,
27 |     interim_dir: Optional[str] = None,
28 |     settings: Optional[Dict[str, Any]] = None,
   |                        ^^^^
29 | ) -> List[Tuple[int, int]]:
30 |     """Generate candidate pairs using soft-ban blocking strategy.
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/blocking.py:29:6
   |
27 |     interim_dir: Optional[str] = None,
28 |     settings: Optional[Dict[str, Any]] = None,
29 | ) -> List[Tuple[int, int]]:
   |      ^^^^
30 |     """Generate candidate pairs using soft-ban blocking strategy.
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/similarity/blocking.py:29:11
   |
27 |     interim_dir: Optional[str] = None,
28 |     settings: Optional[Dict[str, Any]] = None,
29 | ) -> List[Tuple[int, int]]:
   |           ^^^^^
30 |     """Generate candidate pairs using soft-ban blocking strategy.
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/blocking.py:43:12
   |
42 |     """
43 |     pairs: List[Tuple[int, int]] = []
   |            ^^^^
44 |
45 |     if df_norm.empty or "name_core" not in df_norm.columns:
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/similarity/blocking.py:43:17
   |
42 |     """
43 |     pairs: List[Tuple[int, int]] = []
   |                 ^^^^^
44 |
45 |     if df_norm.empty or "name_core" not in df_norm.columns:
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/blocking.py:97:24
   |
95 |     # Initialize diagnostics
96 |     block_stats = []
97 |     brand_suggestions: List[Dict[str, Any]] = []
   |                        ^^^^
98 |
99 |     # Allowlisted bigram pass: force full pairing within those bigram groups
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/blocking.py:97:29
   |
95 |     # Initialize diagnostics
96 |     block_stats = []
97 |     brand_suggestions: List[Dict[str, Any]] = []
   |                             ^^^^
98 |
99 |     # Allowlisted bigram pass: force full pairing within those bigram groups
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/blocking.py:251:6
    |
249 |     fallback: str,
250 |     max_size: int,
251 | ) -> List[pd.DataFrame]:
    |      ^^^^
252 |     """Create shards with fallback strategy for oversized shards."""
253 |     shards = _create_shards(df, primary, max_size)
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/blocking.py:273:6
    |
271 |     min_token_overlap: int,
272 |     max_candidates_per_record: int,
273 | ) -> List[Tuple[int, int]]:
    |      ^^^^
274 |     """Apply soft-ban sharding with prefiltering."""
275 |     shards = _create_shards_with_fallback(
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/similarity/blocking.py:273:11
    |
271 |     min_token_overlap: int,
272 |     max_candidates_per_record: int,
273 | ) -> List[Tuple[int, int]]:
    |           ^^^^^
274 |     """Apply soft-ban sharding with prefiltering."""
275 |     shards = _create_shards_with_fallback(
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/blocking.py:306:6
    |
304 |     block_cap: int,
305 |     fallback_shard: Optional[str] = None,
306 | ) -> List[Tuple[int, int]]:
    |      ^^^^
307 |     """Apply standard sharding for large blocks."""
308 |     shards = _create_shards_with_fallback(
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/similarity/blocking.py:306:11
    |
304 |     block_cap: int,
305 |     fallback_shard: Optional[str] = None,
306 | ) -> List[Tuple[int, int]]:
    |           ^^^^^
307 |     """Apply standard sharding for large blocks."""
308 |     shards = _create_shards_with_fallback(
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/blocking.py:328:6
    |
326 |     shard_strategy: str,
327 |     max_shard_size: int,
328 | ) -> List[pd.DataFrame]:
    |      ^^^^
329 |     """Create shards based on strategy."""
330 |     shards = []
    |
help: Replace with `list`

B007 Loop control variable `shard_key` not used within loop body
   --> src/similarity/blocking.py:337:13
    |
335 |         shard_groups = block_df.groupby("shard_key")
336 |
337 |         for shard_key, shard_df in shard_groups:
    |             ^^^^^^^^^
338 |             if len(shard_df) > max_shard_size:
339 |                 # Further shard by third token
    |
help: Rename unused `shard_key` to `_shard_key`

B007 Loop control variable `shard_key` not used within loop body
   --> src/similarity/blocking.py:352:13
    |
350 |         shard_groups = block_df.groupby("shard_key")
351 |
352 |         for shard_key, shard_df in shard_groups:
    |             ^^^^^^^^^
353 |             if len(shard_df) > max_shard_size:
354 |                 # Further shard by 4-gram
    |
help: Rename unused `shard_key` to `_shard_key`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/blocking.py:375:6
    |
373 |     min_token_overlap: int,
374 |     max_candidates_per_record: int,
375 | ) -> List[Tuple[int, int]]:
    |      ^^^^
376 |     """Apply prefiltering to candidate pairs within a shard."""
377 |     names = shard_df["name_core"].tolist()
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/similarity/blocking.py:375:11
    |
373 |     min_token_overlap: int,
374 |     max_candidates_per_record: int,
375 | ) -> List[Tuple[int, int]]:
    |           ^^^^^
376 |     """Apply prefiltering to candidate pairs within a shard."""
377 |     names = shard_df["name_core"].tolist()
    |
help: Replace with `tuple`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/similarity/diagnostics.py:4:1
  |
3 | import logging
4 | from typing import Any, Dict, List, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | import pandas as pd
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/similarity/diagnostics.py:4:1
  |
3 | import logging
4 | from typing import Any, Dict, List, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 |
6 | import pandas as pd
  |

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/diagnostics.py:12:18
   |
11 | def write_blocking_diagnostics(
12 |     block_stats: List[Dict[str, Any]],
   |                  ^^^^
13 |     brand_suggestions: List[Dict[str, Any]],
14 |     interim_dir: Optional[str] = None,
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/diagnostics.py:12:23
   |
11 | def write_blocking_diagnostics(
12 |     block_stats: List[Dict[str, Any]],
   |                       ^^^^
13 |     brand_suggestions: List[Dict[str, Any]],
14 |     interim_dir: Optional[str] = None,
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/diagnostics.py:13:24
   |
11 | def write_blocking_diagnostics(
12 |     block_stats: List[Dict[str, Any]],
13 |     brand_suggestions: List[Dict[str, Any]],
   |                        ^^^^
14 |     interim_dir: Optional[str] = None,
15 | ) -> None:
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/diagnostics.py:13:29
   |
11 | def write_blocking_diagnostics(
12 |     block_stats: List[Dict[str, Any]],
13 |     brand_suggestions: List[Dict[str, Any]],
   |                             ^^^^
14 |     interim_dir: Optional[str] = None,
15 | ) -> None:
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/diagnostics.py:44:18
   |
43 | def generate_brand_suggestions(
44 |     block_stats: List[Dict[str, Any]],
   |                  ^^^^
45 |     groups_df: pd.DataFrame,
46 |     settings: Dict[str, Any],
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/diagnostics.py:44:23
   |
43 | def generate_brand_suggestions(
44 |     block_stats: List[Dict[str, Any]],
   |                       ^^^^
45 |     groups_df: pd.DataFrame,
46 |     settings: Dict[str, Any],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/diagnostics.py:46:15
   |
44 |     block_stats: List[Dict[str, Any]],
45 |     groups_df: pd.DataFrame,
46 |     settings: Dict[str, Any],
   |               ^^^^
47 | ) -> List[Dict[str, Any]]:
48 |     """Generate brand suggestions based on block statistics and group analysis.
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/similarity/diagnostics.py:47:6
   |
45 |     groups_df: pd.DataFrame,
46 |     settings: Dict[str, Any],
47 | ) -> List[Dict[str, Any]]:
   |      ^^^^
48 |     """Generate brand suggestions based on block statistics and group analysis.
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/diagnostics.py:47:11
   |
45 |     groups_df: pd.DataFrame,
46 |     settings: Dict[str, Any],
47 | ) -> List[Dict[str, Any]]:
   |           ^^^^
48 |     """Generate brand suggestions based on block statistics and group analysis.
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/similarity/scoring.py:6:1
  |
5 | import logging
6 | from typing import Any, Dict, List, Optional, Set, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pandas as pd
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/similarity/scoring.py:6:1
  |
5 | import logging
6 | from typing import Any, Dict, List, Optional, Set, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pandas as pd
  |

UP035 `typing.Set` is deprecated, use `set` instead
 --> src/similarity/scoring.py:6:1
  |
5 | import logging
6 | from typing import Any, Dict, List, Optional, Set, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pandas as pd
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/similarity/scoring.py:6:1
  |
5 | import logging
6 | from typing import Any, Dict, List, Optional, Set, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/scoring.py:24:16
   |
22 |     suffix_class_a: str,
23 |     suffix_class_b: str,
24 |     penalties: Dict[str, Any],
   |                ^^^^
25 |     settings: Optional[Dict[str, Any]] = None,
26 | ) -> ScoreComponents:
   |
help: Replace with `dict`

UP045 Use `X | None` for type annotations
  --> src/similarity/scoring.py:25:15
   |
23 |     suffix_class_b: str,
24 |     penalties: Dict[str, Any],
25 |     settings: Optional[Dict[str, Any]] = None,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^
26 | ) -> ScoreComponents:
27 |     """Canonical scorer function - single source of truth for similarity scoring.
   |
help: Convert to `X | None`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/similarity/scoring.py:25:24
   |
23 |     suffix_class_b: str,
24 |     penalties: Dict[str, Any],
25 |     settings: Optional[Dict[str, Any]] = None,
   |                        ^^^^
26 | ) -> ScoreComponents:
27 |     """Canonical scorer function - single source of truth for similarity scoring.
   |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
  --> src/similarity/scoring.py:42:15
   |
40 |     """
41 |     # Apply enhanced normalization if available
42 |     tokens_a: Set[str]
   |               ^^^
43 |     tokens_b: Set[str]
   |
help: Replace with `set`

UP006 Use `set` instead of `Set` for type annotation
  --> src/similarity/scoring.py:43:15
   |
41 |     # Apply enhanced normalization if available
42 |     tokens_a: Set[str]
43 |     tokens_b: Set[str]
   |               ^^^
44 |
45 |     try:
   |
help: Replace with `set`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/scoring.py:109:22
    |
107 | def score_pairs_parallel(
108 |     df_norm: pd.DataFrame,
109 |     candidate_pairs: List[Tuple[int, int]],
    |                      ^^^^
110 |     settings: Dict[str, Any],
111 |     enable_progress: bool = False,
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/similarity/scoring.py:109:27
    |
107 | def score_pairs_parallel(
108 |     df_norm: pd.DataFrame,
109 |     candidate_pairs: List[Tuple[int, int]],
    |                           ^^^^^
110 |     settings: Dict[str, Any],
111 |     enable_progress: bool = False,
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/similarity/scoring.py:110:15
    |
108 |     df_norm: pd.DataFrame,
109 |     candidate_pairs: List[Tuple[int, int]],
110 |     settings: Dict[str, Any],
    |               ^^^^
111 |     enable_progress: bool = False,
112 |     parallel_executor: Optional[ExecutorLike] = None,
    |
help: Replace with `dict`

UP045 Use `X | None` for type annotations
   --> src/similarity/scoring.py:112:24
    |
110 |     settings: Dict[str, Any],
111 |     enable_progress: bool = False,
112 |     parallel_executor: Optional[ExecutorLike] = None,
    |                        ^^^^^^^^^^^^^^^^^^^^^^
113 | ) -> List[Dict[str, Any]]:
114 |     """Compute similarity scores for candidate pairs using parallel processing.
    |
help: Convert to `X | None`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/scoring.py:113:6
    |
111 |     enable_progress: bool = False,
112 |     parallel_executor: Optional[ExecutorLike] = None,
113 | ) -> List[Dict[str, Any]]:
    |      ^^^^
114 |     """Compute similarity scores for candidate pairs using parallel processing.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/similarity/scoring.py:113:11
    |
111 |     enable_progress: bool = False,
112 |     parallel_executor: Optional[ExecutorLike] = None,
113 | ) -> List[Dict[str, Any]]:
    |           ^^^^
114 |     """Compute similarity scores for candidate pairs using parallel processing.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/scoring.py:155:34
    |
153 |         ]
154 |
155 |         def process_chunk(chunk: List[Tuple[int, int]]) -> List[Dict[str, Any]]:
    |                                  ^^^^
156 |             return [
157 |                 {
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/similarity/scoring.py:155:39
    |
153 |         ]
154 |
155 |         def process_chunk(chunk: List[Tuple[int, int]]) -> List[Dict[str, Any]]:
    |                                       ^^^^^
156 |             return [
157 |                 {
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/scoring.py:155:60
    |
153 |         ]
154 |
155 |         def process_chunk(chunk: List[Tuple[int, int]]) -> List[Dict[str, Any]]:
    |                                                            ^^^^
156 |             return [
157 |                 {
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/similarity/scoring.py:155:65
    |
153 |         ]
154 |
155 |         def process_chunk(chunk: List[Tuple[int, int]]) -> List[Dict[str, Any]]:
    |                                                                 ^^^^
156 |             return [
157 |                 {
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/scoring.py:199:22
    |
197 | def score_pairs_bulk(
198 |     df_norm: pd.DataFrame,
199 |     candidate_pairs: List[Tuple[int, int]],
    |                      ^^^^
200 |     settings: Dict[str, Any],
201 |     enable_progress: bool = False,
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/similarity/scoring.py:199:27
    |
197 | def score_pairs_bulk(
198 |     df_norm: pd.DataFrame,
199 |     candidate_pairs: List[Tuple[int, int]],
    |                           ^^^^^
200 |     settings: Dict[str, Any],
201 |     enable_progress: bool = False,
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/similarity/scoring.py:200:15
    |
198 |     df_norm: pd.DataFrame,
199 |     candidate_pairs: List[Tuple[int, int]],
200 |     settings: Dict[str, Any],
    |               ^^^^
201 |     enable_progress: bool = False,
202 | ) -> List[Dict[str, Any]]:
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/similarity/scoring.py:202:6
    |
200 |     settings: Dict[str, Any],
201 |     enable_progress: bool = False,
202 | ) -> List[Dict[str, Any]]:
    |      ^^^^
203 |     """Compute similarity scores for candidate pairs using bulk processing.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/similarity/scoring.py:202:11
    |
200 |     settings: Dict[str, Any],
201 |     enable_progress: bool = False,
202 | ) -> List[Dict[str, Any]]:
    |           ^^^^
203 |     """Compute similarity scores for candidate pairs using bulk processing.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/survivorship.py:11:1
   |
 9 | import json
10 | import logging
11 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/survivorship.py:11:1
   |
 9 | import json
10 | import logging
11 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/survivorship.py:25:25
   |
23 | def select_primary_records(
24 |     df_groups: pd.DataFrame,
25 |     relationship_ranks: Dict[str, int],
   |                         ^^^^
26 |     settings: Dict[str, Any],
27 |     enable_progress: bool = False,
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/survivorship.py:26:15
   |
24 |     df_groups: pd.DataFrame,
25 |     relationship_ranks: Dict[str, int],
26 |     settings: Dict[str, Any],
   |               ^^^^
27 |     enable_progress: bool = False,
28 |     profile: bool = False,
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/survivorship.py:95:25
   |
93 | def _select_primary_records_optimized(
94 |     df_groups: pd.DataFrame,
95 |     relationship_ranks: Dict[str, int],
   |                         ^^^^
96 |     settings: Dict[str, Any],
97 |     enable_progress: bool = False,
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/survivorship.py:96:15
   |
94 |     df_groups: pd.DataFrame,
95 |     relationship_ranks: Dict[str, int],
96 |     settings: Dict[str, Any],
   |               ^^^^
97 |     enable_progress: bool = False,
98 | ) -> pd.DataFrame:
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:191:25
    |
189 | def _select_primary_records_vectorized(
190 |     df_groups: pd.DataFrame,
191 |     relationship_ranks: Dict[str, int],
    |                         ^^^^
192 |     settings: Dict[str, Any],
193 |     enable_progress: bool = False,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:192:15
    |
190 |     df_groups: pd.DataFrame,
191 |     relationship_ranks: Dict[str, int],
192 |     settings: Dict[str, Any],
    |               ^^^^
193 |     enable_progress: bool = False,
194 | ) -> pd.DataFrame:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:270:25
    |
268 | def _select_primary_records_original(
269 |     df_groups: pd.DataFrame,
270 |     relationship_ranks: Dict[str, int],
    |                         ^^^^
271 |     settings: Dict[str, Any],
272 |     enable_progress: bool = False,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:271:15
    |
269 |     df_groups: pd.DataFrame,
270 |     relationship_ranks: Dict[str, int],
271 |     settings: Dict[str, Any],
    |               ^^^^
272 |     enable_progress: bool = False,
273 | ) -> pd.DataFrame:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:333:25
    |
331 | def _select_primary_from_group(
332 |     group_data: pd.DataFrame,
333 |     relationship_ranks: Dict[str, int],
    |                         ^^^^
334 |     settings: Dict[str, Any],
335 | ) -> int:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:334:15
    |
332 |     group_data: pd.DataFrame,
333 |     relationship_ranks: Dict[str, int],
334 |     settings: Dict[str, Any],
    |               ^^^^
335 | ) -> int:
336 |     """Select primary record from a group using relationship rank and tie-breakers.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/survivorship.py:388:31
    |
386 | def generate_merge_preview(
387 |     df_groups: pd.DataFrame,
388 |     selected_fields: Optional[List[str]] = None,
    |                               ^^^^
389 |     settings: Optional[Dict[str, Any]] = None,
390 | ) -> pd.DataFrame:
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:389:24
    |
387 |     df_groups: pd.DataFrame,
388 |     selected_fields: Optional[List[str]] = None,
389 |     settings: Optional[Dict[str, Any]] = None,
    |                        ^^^^
390 | ) -> pd.DataFrame:
391 |     """Generate merge preview showing field differences within groups.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/survivorship.py:443:23
    |
441 | def _generate_merge_preview_original(
442 |     df_groups: pd.DataFrame,
443 |     available_fields: List[str],
    |                       ^^^^
444 | ) -> pd.DataFrame:
445 |     """Original row-by-row merge preview generation.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/survivorship.py:484:23
    |
482 | def _generate_merge_preview_by_group(
483 |     df_groups: pd.DataFrame,
484 |     available_fields: List[str],
    |                       ^^^^
485 |     skip_clean_groups: bool = True,
486 |     preview_output: str = "survivorship_preview.parquet",
    |
help: Replace with `list`

E731 Do not assign a `lambda` expression, use a `def`
   --> src/survivorship.py:540:13
    |
538 |             import orjson
539 |
540 |             json_dumps = lambda x: orjson.dumps(x).decode("utf-8")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
541 |         except ImportError:
542 |             json_dumps = lambda x: json.dumps(x)
    |
help: Rewrite `json_dumps` as a `def`

E731 Do not assign a `lambda` expression, use a `def`
   --> src/survivorship.py:542:13
    |
540 |             json_dumps = lambda x: orjson.dumps(x).decode("utf-8")
541 |         except ImportError:
542 |             json_dumps = lambda x: json.dumps(x)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
543 |
544 |         # Process groups in batches for better performance
    |
help: Rewrite `json_dumps` as a `def`

UP006 Use `list` instead of `List` for type annotation
   --> src/survivorship.py:591:13
    |
589 | def _generate_group_merge_preview(
590 |     group_data: pd.DataFrame,
591 |     fields: List[str],
    |             ^^^^
592 | ) -> Dict[str, Any]:
593 |     """Generate merge preview for a specific group.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:592:6
    |
590 |     group_data: pd.DataFrame,
591 |     fields: List[str],
592 | ) -> Dict[str, Any]:
    |      ^^^^
593 |     """Generate merge preview for a specific group.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/survivorship.py:619:14
    |
617 |     non_primary_records = group_data[~primary_mask]
618 |
619 |     preview: Dict[str, Any] = {
    |              ^^^^
620 |         "primary_record": {
621 |             "index": int(str(primary_record.name)),
    |
help: Replace with `dict`

F811 Redefinition of unused `optimize_dataframe_memory` from line 9
  --> src/utils/__init__.py:33:5
   |
31 |     # to_arrow_strings,  # DEPRECATED: PyArrow backend removed
32 |     narrow_sort,
33 |     optimize_dataframe_memory,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `optimize_dataframe_memory` redefined here
34 |     parse_name_core_tokens,
35 | )
   |
  ::: src/utils/__init__.py:9:5
   |
 7 |     drop_intermediate_columns,
 8 |     get_dtypes_for_schema,
 9 |     optimize_dataframe_memory,
   |     ------------------------- previous definition of `optimize_dataframe_memory` here
10 | )
11 | from .hash_utils import (
   |
help: Remove definition: `optimize_dataframe_memory`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/artifact_management.py:7:1
  |
6 | import os
7 | from typing import Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | from src.utils.path_utils import get_artifact_path, get_interim_dir, get_processed_dir
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/artifact_management.py:12:40
   |
12 | def get_artifact_paths(run_id: str) -> Dict[str, str]:
   |                                        ^^^^
13 |     """Get artifact paths for a run.
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/cache_keys.py:10:1
   |
 8 | from dataclasses import dataclass
 9 | from enum import Enum
10 | from typing import Any, Dict, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | from src.utils.artifact_management import get_artifact_paths
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_keys.py:111:14
    |
109 |     page: int,
110 |     page_size: int,
111 |     filters: Dict[str, Any],
    |              ^^^^
112 |     backend: str = "pyarrow",
113 |     source: str = "review_ready",
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/cache_utils.py:13:1
   |
11 | import sys
12 | from datetime import datetime
13 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from src.utils.logging_utils import get_logger
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/cache_utils.py:13:1
   |
11 | import sys
12 | from datetime import datetime
13 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from src.utils.logging_utils import get_logger
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/cache_utils.py:13:1
   |
11 | import sys
12 | from datetime import datetime
13 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | from src.utils.logging_utils import get_logger
   |

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/cache_utils.py:43:34
   |
43 | def generate_run_id(input_paths: List[str], config_paths: List[str]) -> str:
   |                                  ^^^^
44 |     """Generate a unique run ID based on input and config file hashes.
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/cache_utils.py:43:59
   |
43 | def generate_run_id(input_paths: List[str], config_paths: List[str]) -> str:
   |                                                           ^^^^
44 |     """Generate a unique run ID based on input and config file hashes.
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/cache_utils.py:68:43
   |
68 | def get_cache_directories(run_id: str) -> Tuple[str, str]:
   |                                           ^^^^^
69 |     """Get interim and processed cache directories for a run."""
70 |     interim_dir = str(get_interim_dir(run_id))
   |
help: Replace with `tuple`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/cache_utils.py:75:46
   |
75 | def create_cache_directories(run_id: str) -> Tuple[str, str]:
   |                                              ^^^^^
76 |     """Create cache directories for a run and return their paths."""
77 |     if not run_id:
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/cache_utils.py:90:25
   |
90 | def load_run_index() -> Dict[str, Any]:
   |                         ^^^^
91 |     """Load the run index from JSON file."""
92 |     if not os.path.exists(RUN_INDEX_PATH):
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:104:31
    |
104 | def save_run_index(run_index: Dict[str, Any]) -> None:
    |                               ^^^^
105 |     """Save the run index to JSON file."""
106 |     os.makedirs(os.path.dirname(RUN_INDEX_PATH), exist_ok=True)
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:117:18
    |
115 | def add_run_to_index(
116 |     run_id: str,
117 |     input_paths: List[str],
    |                  ^^^^
118 |     config_paths: List[str],
119 |     status: str = "running",
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:118:19
    |
116 |     run_id: str,
117 |     input_paths: List[str],
118 |     config_paths: List[str],
    |                   ^^^^
119 |     status: str = "running",
120 | ) -> None:
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:293:34
    |
293 | def preview_delete_runs(run_ids: List[str]) -> Dict[str, Any]:
    |                                  ^^^^
294 |     """Preview deletion of runs and return what would be removed.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:293:48
    |
293 | def preview_delete_runs(run_ids: List[str]) -> Dict[str, Any]:
    |                                                ^^^^
294 |     """Preview deletion of runs and return what would be removed.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:304:14
    |
302 |     """
303 |     run_index = load_run_index()
304 |     preview: Dict[str, Any] = {
    |              ^^^^
305 |         "runs_to_delete": [],
306 |         "runs_not_found": [],
    |
help: Replace with `dict`

B007 Loop control variable `dirs` not used within loop body
   --> src/utils/cache_utils.py:336:27
    |
334 |         for directory in [interim_dir, processed_dir]:
335 |             if os.path.exists(directory):
336 |                 for root, dirs, files in os.walk(directory):
    |                           ^^^^
337 |                     for file in files:
338 |                         file_path = os.path.join(root, file)
    |
help: Rename unused `dirs` to `_dirs`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:359:26
    |
359 | def delete_runs(run_ids: List[str]) -> Dict[str, Any]:
    |                          ^^^^
360 |     """Delete runs and their artifacts.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:359:40
    |
359 | def delete_runs(run_ids: List[str]) -> Dict[str, Any]:
    |                                        ^^^^
360 |     """Delete runs and their artifacts.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:382:14
    |
381 |     run_index = load_run_index()
382 |     results: Dict[str, Any] = {
    |              ^^^^
383 |         "deleted": [],
384 |         "not_found": [],
    |
help: Replace with `dict`

B007 Loop control variable `dirs` not used within loop body
   --> src/utils/cache_utils.py:422:31
    |
420 |                 try:
421 |                     # Calculate size before deletion
422 |                     for root, dirs, files in os.walk(directory):
    |                               ^^^^
423 |                         for file in files:
424 |                             try:
    |
help: Rename unused `dirs` to `_dirs`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:522:33
    |
522 | def log_deletion_audit(run_ids: List[str], bytes_freed: int) -> None:
    |                                 ^^^^
523 |     """Log deletion audit information to file."""
524 |     audit_log_path = str(get_processed_dir("audit") / "run_deletions.log")
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:541:27
    |
541 | def list_runs_sorted() -> List[Tuple[str, Dict[str, Any]]]:
    |                           ^^^^
542 |     """Get list of runs sorted by timestamp (newest first)."""
543 |     run_index = load_run_index()
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/cache_utils.py:541:32
    |
541 | def list_runs_sorted() -> List[Tuple[str, Dict[str, Any]]]:
    |                                ^^^^^
542 |     """Get list of runs sorted by timestamp (newest first)."""
543 |     run_index = load_run_index()
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:541:43
    |
541 | def list_runs_sorted() -> List[Tuple[str, Dict[str, Any]]]:
    |                                           ^^^^
542 |     """Get list of runs sorted by timestamp (newest first)."""
543 |     run_index = load_run_index()
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:551:33
    |
551 | def list_runs_deduplicated() -> List[Tuple[str, Dict[str, Any]]]:
    |                                 ^^^^
552 |     """Get list of runs sorted by timestamp (newest first) with duplicates removed.
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/cache_utils.py:551:38
    |
551 | def list_runs_deduplicated() -> List[Tuple[str, Dict[str, Any]]]:
    |                                      ^^^^^
552 |     """Get list of runs sorted by timestamp (newest first) with duplicates removed.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:551:49
    |
551 | def list_runs_deduplicated() -> List[Tuple[str, Dict[str, Any]]]:
    |                                                 ^^^^
552 |     """Get list of runs sorted by timestamp (newest first) with duplicates removed.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:564:18
    |
563 |     # Group runs by input_hash + config_hash
564 |     hash_groups: Dict[str, List[Tuple[str, Dict[str, Any]]]] = {}
    |                  ^^^^
565 |
566 |     for run_id, run_data in run_index.items():
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cache_utils.py:564:28
    |
563 |     # Group runs by input_hash + config_hash
564 |     hash_groups: Dict[str, List[Tuple[str, Dict[str, Any]]]] = {}
    |                            ^^^^
565 |
566 |     for run_id, run_data in run_index.items():
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/cache_utils.py:564:33
    |
563 |     # Group runs by input_hash + config_hash
564 |     hash_groups: Dict[str, List[Tuple[str, Dict[str, Any]]]] = {}
    |                                 ^^^^^
565 |
566 |     for run_id, run_data in run_index.items():
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/cache_utils.py:564:44
    |
563 |     # Group runs by input_hash + config_hash
564 |     hash_groups: Dict[str, List[Tuple[str, Dict[str, Any]]]] = {}
    |                                            ^^^^
565 |
566 |     for run_id, run_data in run_index.items():
    |
help: Replace with `dict`

B007 Loop control variable `hash_key` not used within loop body
   --> src/utils/cache_utils.py:579:9
    |
577 |     total_duplicates = 0
578 |
579 |     for hash_key, group_runs in hash_groups.items():
    |         ^^^^^^^^
580 |         if len(group_runs) > 1:
581 |             # Sort by timestamp (newest first) and keep only the first (most recent)
    |
help: Rename unused `hash_key` to `_hash_key`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/cli_builder.py:3:1
  |
1 | """CLI Command Builder utilities for Streamlit UI."""
2 |
3 | from typing import Dict, List, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | from src.utils.path_utils import get_config_path
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/utils/cli_builder.py:3:1
  |
1 | """CLI Command Builder utilities for Streamlit UI."""
2 |
3 | from typing import Dict, List, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | from src.utils.path_utils import get_config_path
  |

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/cli_builder.py:8:36
   |
 8 | def get_available_input_files() -> List[str]:
   |                                    ^^^^
 9 |     """Get list of available CSV files in data/raw/ directory."""
10 |     raw_dir = get_config_path().parent.parent / "data" / "raw"
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/cli_builder.py:22:37
   |
22 | def get_available_config_files() -> List[str]:
   |                                     ^^^^
23 |     """Get list of available YAML config files in config/ directory."""
24 |     config_dir = get_config_path().parent
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/cli_builder.py:46:29
   |
44 |     run_id: Optional[str] = None,
45 |     keep_runs: Optional[int] = None,
46 |     col_overrides: Optional[List[str]] = None,
   |                             ^^^^
47 | ) -> Dict[str, str]:
48 |     """Validate CLI arguments and return any validation errors.
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/cli_builder.py:47:6
   |
45 |     keep_runs: Optional[int] = None,
46 |     col_overrides: Optional[List[str]] = None,
47 | ) -> Dict[str, str]:
   |      ^^^^
48 |     """Validate CLI arguments and return any validation errors.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/cli_builder.py:54:13
   |
53 |     """
54 |     errors: Dict[str, str] = {}
   |             ^^^^
55 |
56 |     # Required fields
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cli_builder.py:117:29
    |
115 |     keep_runs: Optional[int] = None,
116 |     extra_args: str = "",
117 |     col_overrides: Optional[List[str]] = None,
    |                             ^^^^
118 | ) -> str:
119 |     """Build CLI command for running the pipeline.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/cli_builder.py:183:28
    |
183 | def get_known_run_ids() -> List[str]:
    |                            ^^^^
184 |     """Get list of known run IDs from run_index.json."""
185 |     try:
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/dtypes.py:8:1
   |
 7 | import logging
 8 | from typing import Dict, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 |
10 | import pandas as pd
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> src/utils/dtypes.py:8:1
   |
 7 | import logging
 8 | from typing import Dict, Optional, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 |
10 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/dtypes.py:31:44
   |
31 | def apply_dtypes(df: pd.DataFrame, schema: Dict[str, str]) -> pd.DataFrame:
   |                                            ^^^^
32 |     """Apply dtype mapping to dataframe, handling missing columns gracefully.
   |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
  --> src/utils/dtypes.py:74:23
   |
72 | def assert_no_unexpected_object_columns(
73 |     df: pd.DataFrame,
74 |     allowed: Optional[Set[str]] = None,
   |                       ^^^
75 |     context: str = "dataframe",
76 | ) -> None:
   |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/dtypes.py:189:50
    |
189 | def _detect_schema(df: pd.DataFrame) -> Optional[Dict[str, str]]:
    |                                                  ^^^^
190 |     """Detect which schema to apply based on dataframe columns.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/dtypes.py:214:48
    |
214 | def get_dtypes_for_schema(schema_name: str) -> Dict[str, str]:
    |                                                ^^^^
215 |     """Get dtype mapping for specific pipeline schema.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/duckdb_group_stats.py:15:1
   |
13 | import time
14 | from pathlib import Path
15 | from typing import Any, Dict, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |
17 | import duckdb
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/duckdb_group_stats.py:15:1
   |
13 | import time
14 | from pathlib import Path
15 | from typing import Any, Dict, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |
17 | import duckdb
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/duckdb_group_stats.py:38:34
   |
36 |     """DuckDB-based group statistics engine with memoization."""
37 |
38 |     def __init__(self, settings: Dict[str, Any], run_id: str):
   |                                  ^^^^
39 |         """Initialize DuckDB group stats engine.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/duckdb_group_stats.py:86:43
   |
84 |         self.conn = self._create_duckdb_connection()
85 |
86 |     def _get_duckdb_threads(self, config: Dict[str, Any]) -> int:
   |                                           ^^^^
87 |         """Get optimal DuckDB thread count."""
88 |         if config.get("threads") == "auto":
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/duckdb_group_stats.py:94:48
   |
92 |         return int(config.get("threads", 4))
93 |
94 |     def _get_duckdb_memory_limit(self, config: Dict[str, Any]) -> Optional[str]:
   |                                                ^^^^
95 |         """Get DuckDB memory limit from config or environment."""
96 |         if config.get("memory_limit"):
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/duckdb_group_stats.py:156:10
    |
154 |         config_digest: str = "",
155 |         request_id: Optional[str] = None,
156 |     ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |          ^^^^^
157 |         """Compute group statistics using DuckDB.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/duckdb_group_stats.py:156:30
    |
154 |         config_digest: str = "",
155 |         request_id: Optional[str] = None,
156 |     ) -> Tuple[pd.DataFrame, Dict[str, Any]]:
    |                              ^^^^
157 |         """Compute group statistics using DuckDB.
    |
help: Replace with `dict`

W291 Trailing whitespace
   --> src/utils/duckdb_group_stats.py:235:15
    |
233 |         # SQL query for group statistics
234 |         query = f"""
235 |         SELECT 
    |               ^
236 |             {GROUP_ID},
237 |             COUNT(*) as {GROUP_SIZE},
    |
help: Remove trailing whitespace

W291 Trailing whitespace
   --> src/utils/duckdb_group_stats.py:241:23
    |
239 |             FIRST(CASE WHEN {IS_PRIMARY} THEN {ACCOUNT_NAME} ELSE NULL END) as {PRIMARY_NAME},
240 |             FIRST(CASE WHEN {IS_PRIMARY} THEN {DISPOSITION} ELSE 'Update' END) as disposition_col
241 |         FROM groups_df 
    |                       ^
242 |         GROUP BY {GROUP_ID}
243 |         ORDER BY {GROUP_ID}
    |
help: Remove trailing whitespace

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/duckdb_group_stats.py:308:10
    |
306 |         output_path: str,
307 |         target_size_mb: Optional[float] = None,
308 |     ) -> Dict[str, Any]:
    |          ^^^^
309 |         """Write DataFrame to optimized Parquet using DuckDB.
    |
help: Replace with `dict`

W291 Trailing whitespace
   --> src/utils/duckdb_group_stats.py:345:58
    |
344 |         copy_sql = f"""
345 |         COPY (SELECT * FROM output_df) TO '{output_path}' 
    |                                                          ^
346 |         ({', '.join(copy_options)})
347 |         """
    |
help: Remove trailing whitespace

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/duckdb_group_stats.py:388:15
    |
387 | def create_duckdb_group_stats_engine(
388 |     settings: Dict[str, Any],
    |               ^^^^
389 |     run_id: str,
390 | ) -> DuckDBGroupStatsEngine:
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/exact_equals.py:12:1
   |
10 | import logging
11 | from pathlib import Path
12 | from typing import Any, Dict, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/exact_equals.py:12:1
   |
10 | import logging
11 | from pathlib import Path
12 | from typing import Any, Dict, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/exact_equals.py:19:54
   |
19 | def build_raw_exact_key(account_name: str, settings: Dict[str, Any]) -> str:
   |                                                      ^^^^
20 |     """Build raw exact key by trim + collapse whitespace (no case/punct changes).
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/exact_equals.py:55:15
   |
53 | def find_exact_equals_groups(
54 |     df: pd.DataFrame,
55 |     settings: Dict[str, Any],
   |               ^^^^
56 |     name_column: str = "Account Name",
57 | ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/exact_equals.py:57:6
   |
55 |     settings: Dict[str, Any],
56 |     name_column: str = "Account Name",
57 | ) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
   |      ^^^^^
58 |     """Find exact equals groups before normalization.
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/exact_equals.py:209:15
    |
207 |     interim_dir: str,
208 |     run_id: str,
209 |     settings: Dict[str, Any],
    |               ^^^^
210 | ) -> None:
211 |     """Write exact equals artifacts with no-overwrite policy.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/exact_equals.py:275:15
    |
273 |     df: pd.DataFrame,
274 |     raw_exact_map: pd.DataFrame,
275 |     settings: Dict[str, Any],
    |               ^^^^
276 | ) -> pd.DataFrame:
277 |     """Create unique normalized dataset with representatives + singletons only.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/filtering.py:7:1
  |
6 | from dataclasses import dataclass
7 | from typing import Any, Dict, List, Literal, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | from src.utils.logging_utils import get_logger
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/utils/filtering.py:7:1
  |
6 | from dataclasses import dataclass
7 | from typing import Any, Dict, List, Literal, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | from src.utils.logging_utils import get_logger
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/utils/filtering.py:7:1
  |
6 | from dataclasses import dataclass
7 | from typing import Any, Dict, List, Literal, Tuple, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | from src.utils.logging_utils import get_logger
  |

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/filtering.py:99:6
    |
 97 |     sort_key: str,
 98 |     context: str = "default",
 99 | ) -> List[Tuple[str, str]]:
    |      ^^^^
100 |     """Build PyArrow sort keys for stable sorting.
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/filtering.py:99:11
    |
 97 |     sort_key: str,
 98 |     context: str = "default",
 99 | ) -> List[Tuple[str, str]]:
    |           ^^^^^
100 |     """Build PyArrow sort keys for stable sorting.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/filtering.py:132:14
    |
130 | def apply_filters_pyarrow(
131 |     table: Any,
132 |     filters: Dict[str, Any],
    |              ^^^^
133 |     available_columns: list[str] | None = None,
134 | ) -> Any:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/filtering.py:169:47
    |
169 | def apply_filters_duckdb(table: Any, filters: Dict[str, Any]) -> Any:
    |                                               ^^^^
170 |     """Apply filters to DuckDB table/DataFrame.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/group_details.py:23:1
   |
21 | import os
22 | import time
23 | from typing import Any, Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |
25 | from .artifact_management import get_artifact_paths
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/group_details.py:23:1
   |
21 | import os
22 | import time
23 | from typing import Any, Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |
25 | from .artifact_management import get_artifact_paths
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/group_details.py:23:1
   |
21 | import os
22 | import time
23 | from typing import Any, Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24 |
25 | from .artifact_management import get_artifact_paths
   |

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/group_details.py:72:50
   |
72 | def _get_available_columns(parquet_path: str) -> List[str]:
   |                                                  ^^^^
73 |     """Get available columns from parquet file, with fallback for missing columns."""
74 |     try:
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_details.py:101:46
    |
101 | def _build_dynamic_select(available_columns: List[str]) -> str:
    |                                              ^^^^
102 |     """Build SELECT clause based on available columns."""
103 |     return "SELECT " + ",".join(available_columns) + " FROM read_parquet(?) "
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:114:14
    |
113 | def _build_where_clause(
114 |     filters: Dict[str, Any],
    |              ^^^^
115 |     available_columns: List[str],
116 | ) -> Tuple[str, List]:
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_details.py:115:24
    |
113 | def _build_where_clause(
114 |     filters: Dict[str, Any],
115 |     available_columns: List[str],
    |                        ^^^^
116 | ) -> Tuple[str, List]:
117 |     """Build WHERE for per-row details (dispositions/min_edge_strength)."""
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_details.py:116:6
    |
114 |     filters: Dict[str, Any],
115 |     available_columns: List[str],
116 | ) -> Tuple[str, List]:
    |      ^^^^^
117 |     """Build WHERE for per-row details (dispositions/min_edge_strength)."""
118 |     where_sql, params = [], []
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_details.py:116:17
    |
114 |     filters: Dict[str, Any],
115 |     available_columns: List[str],
116 | ) -> Tuple[str, List]:
    |                 ^^^^
117 |     """Build WHERE for per-row details (dispositions/min_edge_strength)."""
118 |     where_sql, params = [], []
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_details.py:133:39
    |
133 | def _parse_order_by(order_by: str) -> Tuple[str, bool]:
    |                                       ^^^^^
134 |     """Parse ORDER BY clause into column and direction.
    |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:163:14
    |
161 |     page: int,
162 |     page_size: int,
163 |     filters: Dict[str, Any],
    |              ^^^^
164 | ) -> Tuple[List[Dict[str, Any]], int]:
165 |     """Entry point selecting backend & returning (rows, total_rows) for a single group."""
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_details.py:164:6
    |
162 |     page_size: int,
163 |     filters: Dict[str, Any],
164 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
165 |     """Entry point selecting backend & returning (rows, total_rows) for a single group."""
166 |     start_time = time.time()
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_details.py:164:12
    |
162 |     page_size: int,
163 |     filters: Dict[str, Any],
164 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
165 |     """Entry point selecting backend & returning (rows, total_rows) for a single group."""
166 |     start_time = time.time()
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:164:17
    |
162 |     page_size: int,
163 |     filters: Dict[str, Any],
164 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
165 |     """Entry point selecting backend & returning (rows, total_rows) for a single group."""
166 |     start_time = time.time()
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:337:14
    |
335 |     page: int,
336 |     page_size: int,
337 |     filters: Dict[str, Any],
    |              ^^^^
338 |     settings: Dict[str, Any],
339 | ) -> Tuple[List[Dict[str, Any]], int]:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:338:15
    |
336 |     page_size: int,
337 |     filters: Dict[str, Any],
338 |     settings: Dict[str, Any],
    |               ^^^^
339 | ) -> Tuple[List[Dict[str, Any]], int]:
340 |     """DuckDB backend for group details (fast filtering + pagination)."""
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_details.py:339:6
    |
337 |     filters: Dict[str, Any],
338 |     settings: Dict[str, Any],
339 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
340 |     """DuckDB backend for group details (fast filtering + pagination)."""
341 |     if DUCKDB is None:
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_details.py:339:12
    |
337 |     filters: Dict[str, Any],
338 |     settings: Dict[str, Any],
339 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
340 |     """DuckDB backend for group details (fast filtering + pagination)."""
341 |     if DUCKDB is None:
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:339:17
    |
337 |     filters: Dict[str, Any],
338 |     settings: Dict[str, Any],
339 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
340 |     """DuckDB backend for group details (fast filtering + pagination)."""
341 |     if DUCKDB is None:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:416:14
    |
414 |     page: int,
415 |     page_size: int,
416 |     filters: Dict[str, Any],
    |              ^^^^
417 |     settings: Dict[str, Any],
418 | ) -> Tuple[List[Dict[str, Any]], int]:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:417:15
    |
415 |     page_size: int,
416 |     filters: Dict[str, Any],
417 |     settings: Dict[str, Any],
    |               ^^^^
418 | ) -> Tuple[List[Dict[str, Any]], int]:
419 |     """PyArrow backend for group details with pandas fallback and deterministic sort."""
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_details.py:418:6
    |
416 |     filters: Dict[str, Any],
417 |     settings: Dict[str, Any],
418 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
419 |     """PyArrow backend for group details with pandas fallback and deterministic sort."""
420 |     import pyarrow as pa
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_details.py:418:12
    |
416 |     filters: Dict[str, Any],
417 |     settings: Dict[str, Any],
418 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
419 |     """PyArrow backend for group details with pandas fallback and deterministic sort."""
420 |     import pyarrow as pa
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_details.py:418:17
    |
416 |     filters: Dict[str, Any],
417 |     settings: Dict[str, Any],
418 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
419 |     """PyArrow backend for group details with pandas fallback and deterministic sort."""
420 |     import pyarrow as pa
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/group_pagination.py:9:1
   |
 7 | import re
 8 | import time
 9 | from typing import Any, Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | from .artifact_management import get_artifact_paths
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/group_pagination.py:9:1
   |
 7 | import re
 8 | import time
 9 | from typing import Any, Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | from .artifact_management import get_artifact_paths
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/group_pagination.py:9:1
   |
 7 | import re
 8 | import time
 9 | from typing import Any, Dict, List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | from .artifact_management import get_artifact_paths
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/group_pagination.py:41:34
   |
41 | def _build_where_clause(filters: Dict[str, Any], score_column: str) -> Tuple[str, List]:
   |                                  ^^^^
42 |     """Build WHERE clause and parameters for common filters.
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/group_pagination.py:41:72
   |
41 | def _build_where_clause(filters: Dict[str, Any], score_column: str) -> Tuple[str, List]:
   |                                                                        ^^^^^
42 |     """Build WHERE clause and parameters for common filters.
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/group_pagination.py:41:83
   |
41 | def _build_where_clause(filters: Dict[str, Any], score_column: str) -> Tuple[str, List]:
   |                                                                                   ^^^^
42 |     """Build WHERE clause and parameters for common filters.
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_pagination.py:113:65
    |
113 | def _get_available_columns_for_pagination(parquet_path: str) -> List[str]:
    |                                                                 ^^^^
114 |     """Get available columns from parquet file for pagination queries."""
115 |     try:
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:139:14
    |
137 |     page: int,
138 |     page_size: int,
139 |     filters: Dict[str, Any],
    |              ^^^^
140 | ) -> Tuple[List[Dict[str, Any]], int]:
141 |     """Get a page of groups using the configured backend (PyArrow or DuckDB).
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_pagination.py:140:6
    |
138 |     page_size: int,
139 |     filters: Dict[str, Any],
140 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
141 |     """Get a page of groups using the configured backend (PyArrow or DuckDB).
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_pagination.py:140:12
    |
138 |     page_size: int,
139 |     filters: Dict[str, Any],
140 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
141 |     """Get a page of groups using the configured backend (PyArrow or DuckDB).
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:140:17
    |
138 |     page_size: int,
139 |     filters: Dict[str, Any],
140 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
141 |     """Get a page of groups using the configured backend (PyArrow or DuckDB).
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:296:14
    |
294 |     page: int,
295 |     page_size: int,
296 |     filters: Dict[str, Any],
    |              ^^^^
297 | ) -> Tuple[List[Dict[str, Any]], int]:
298 |     """Get a page of groups using PyArrow backend.
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_pagination.py:297:6
    |
295 |     page_size: int,
296 |     filters: Dict[str, Any],
297 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
298 |     """Get a page of groups using PyArrow backend.
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_pagination.py:297:12
    |
295 |     page_size: int,
296 |     filters: Dict[str, Any],
297 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
298 |     """Get a page of groups using PyArrow backend.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:297:17
    |
295 |     page_size: int,
296 |     filters: Dict[str, Any],
297 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
298 |     """Get a page of groups using PyArrow backend.
    |
help: Replace with `dict`

B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   --> src/utils/group_pagination.py:373:9
    |
371 |     except ImportError:
372 |         logger.error("PyArrow not available for groups page querying")
373 |         raise ImportError("PyArrow not available for groups page querying")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
374 |     except Exception as e:
375 |         logger.error(f"Failed to read parquet file: {e}")
    |

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:495:14
    |
493 |     page: int,
494 |     page_size: int,
495 |     filters: Dict[str, Any],
    |              ^^^^
496 | ) -> Tuple[List[Dict[str, Any]], int]:
497 |     """Load groups page data using DuckDB for optimal performance.
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_pagination.py:496:6
    |
494 |     page_size: int,
495 |     filters: Dict[str, Any],
496 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
497 |     """Load groups page data using DuckDB for optimal performance.
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_pagination.py:496:12
    |
494 |     page_size: int,
495 |     filters: Dict[str, Any],
496 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
497 |     """Load groups page data using DuckDB for optimal performance.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:496:17
    |
494 |     page_size: int,
495 |     filters: Dict[str, Any],
496 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
497 |     """Load groups page data using DuckDB for optimal performance.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:733:14
    |
731 |     page: int,
732 |     page_size: int,
733 |     filters: Dict[str, Any],
    |              ^^^^
734 | ) -> Tuple[List[Dict[str, Any]], int]:
735 |     """Get a page of groups using DuckDB from group_stats.parquet.
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/group_pagination.py:734:6
    |
732 |     page_size: int,
733 |     filters: Dict[str, Any],
734 | ) -> Tuple[List[Dict[str, Any]], int]:
    |      ^^^^^
735 |     """Get a page of groups using DuckDB from group_stats.parquet.
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/group_pagination.py:734:12
    |
732 |     page_size: int,
733 |     filters: Dict[str, Any],
734 | ) -> Tuple[List[Dict[str, Any]], int]:
    |            ^^^^
735 |     """Get a page of groups using DuckDB from group_stats.parquet.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:734:17
    |
732 |     page_size: int,
733 |     filters: Dict[str, Any],
734 | ) -> Tuple[List[Dict[str, Any]], int]:
    |                 ^^^^
735 |     """Get a page of groups using DuckDB from group_stats.parquet.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:913:50
    |
913 | def get_total_groups_count(run_id: str, filters: Dict[str, Any]) -> int:
    |                                                  ^^^^
914 |     """Get the total count of groups for a run with optional filters.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/group_pagination.py:961:14
    |
959 | def get_total_groups_count_from_stats_duckdb(
960 |     run_id: str,
961 |     filters: Dict[str, Any],
    |              ^^^^
962 | ) -> int:
963 |     """Get total groups count from group_stats.parquet using DuckDB.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
    --> src/utils/group_pagination.py:1036:14
     |
1034 | def get_total_groups_count_from_main_parquet(
1035 |     run_id: str,
1036 |     filters: Dict[str, Any],
     |              ^^^^
1037 | ) -> int:
1038 |     """Get total groups count from main parquet file using DuckDB.
     |
help: Replace with `dict`

W291 Trailing whitespace
  --> src/utils/group_stats.py:76:19
   |
74 |             query = (
75 |                 """
76 |             SELECT 
   |                   ^
77 |                 """
78 |                 + GROUP_ID
   |
help: Remove trailing whitespace

W291 Trailing whitespace
  --> src/utils/group_stats.py:97:27
   |
95 |                 + PRIMARY_NAME
96 |                 + """
97 |             FROM groups_df 
   |                           ^
98 |             GROUP BY """
99 |                 + GROUP_ID
   |
help: Remove trailing whitespace

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/hash_utils.py:10:1
   |
 8 | import json
 9 | from pathlib import Path
10 | from typing import Any, Dict, List, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/hash_utils.py:10:1
   |
 8 | import json
 9 | from pathlib import Path
10 | from typing import Any, Dict, List, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/hash_utils.py:129:27
    |
129 | def config_hash(cfg_dict: Dict) -> str:
    |                           ^^^^
130 |     """Compute a deterministic hash of the configuration.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/hash_utils.py:145:33
    |
145 | def stable_group_id(member_ids: List[str], cfg_dict: Dict, n: int = 10) -> str:
    |                                 ^^^^
146 |     """Generate a stable, deterministic group ID.
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/hash_utils.py:145:54
    |
145 | def stable_group_id(member_ids: List[str], cfg_dict: Dict, n: int = 10) -> str:
    |                                                      ^^^^
146 |     """Generate a stable, deterministic group ID.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/hash_utils.py:168:39
    |
168 | def _compute_config_hash(config_dict: Dict[str, Any]) -> str:
    |                                       ^^^^
169 |     """Compute a deterministic hash of the configuration.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/io_utils.py:7:1
  |
5 | from collections.abc import Mapping, Sequence
6 | from pathlib import Path
7 | from typing import Any, Dict, List, Optional, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/utils/io_utils.py:7:1
  |
5 | from collections.abc import Mapping, Sequence
6 | from pathlib import Path
7 | from typing import Any, Dict, List, Optional, cast
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/io_utils.py:22:33
   |
21 | @functools.lru_cache(maxsize=1)
22 | def load_settings(path: str) -> Dict[str, Any]:
   |                                 ^^^^
23 |     """Load settings from YAML file with defaults.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/io_utils.py:84:30
   |
83 |         # Deep merge user config over defaults
84 |         def deep_merge(base: Dict[str, Any], update: Dict[str, Any]) -> Dict[str, Any]:
   |                              ^^^^
85 |             for key, value in update.items():
86 |                 if (
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/io_utils.py:84:54
   |
83 |         # Deep merge user config over defaults
84 |         def deep_merge(base: Dict[str, Any], update: Dict[str, Any]) -> Dict[str, Any]:
   |                                                      ^^^^
85 |             for key, value in update.items():
86 |                 if (
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/io_utils.py:84:73
   |
83 |         # Deep merge user config over defaults
84 |         def deep_merge(base: Dict[str, Any], update: Dict[str, Any]) -> Dict[str, Any]:
   |                                                                         ^^^^
85 |             for key, value in update.items():
86 |                 if (
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/io_utils.py:106:35
    |
106 | def reload_settings(path: str) -> Dict[str, Any]:
    |                                   ^^^^
107 |     """Force reload settings from file (clears cache).
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/io_utils.py:130:43
    |
130 | def load_relationship_ranks(path: str) -> Dict[str, int]:
    |                                           ^^^^
131 |     """Load relationship ranks from CSV file.
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/io_utils.py:172:26
    |
170 | def list_data_files(
171 |     directory: str,
172 |     extensions: Optional[List[str]] = None,
    |                          ^^^^
173 | ) -> List[str]:
174 |     """List data files in a directory.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/io_utils.py:173:6
    |
171 |     directory: str,
172 |     extensions: Optional[List[str]] = None,
173 | ) -> List[str]:
    |      ^^^^
174 |     """List data files in a directory.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/io_utils.py:187:12
    |
185 |         extensions = [".csv", ".xlsx", ".xls"]
186 |
187 |     files: List[Path] = []
    |            ^^^^
188 |     for ext in extensions:
189 |         files.extend(Path(directory).glob(f"*{ext}"))
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/io_utils.py:221:67
    |
221 | def infer_csv_schema(file_path: str, sample_rows: int = 20000) -> Dict[str, str]:
    |                                                                   ^^^^
222 |     """Infer a stable CSV schema by analyzing a sample of the data.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/io_utils.py:295:25
    |
293 | def read_csv_stable(
294 |     file_path: str,
295 |     dtype_map: Optional[Dict[str, str]] = None,
    |                         ^^^^
296 |     engine: Optional[str] = None,
297 | ) -> pd.DataFrame:
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/mini_dag.py:11:1
   |
 9 | from dataclasses import dataclass, field
10 | from pathlib import Path
11 | from typing import Any, Dict, List, Literal, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | from src.utils.path_utils import get_interim_dir
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/mini_dag.py:11:1
   |
 9 | from dataclasses import dataclass, field
10 | from pathlib import Path
11 | from typing import Any, Dict, List, Literal, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | from src.utils.path_utils import get_interim_dir
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/mini_dag.py:11:1
   |
 9 | from dataclasses import dataclass, field
10 | from pathlib import Path
11 | from typing import Any, Dict, List, Literal, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | from src.utils.path_utils import get_interim_dir
   |

UP045 Use `X | None` for type annotations
  --> src/utils/mini_dag.py:28:17
   |
26 |     name: str
27 |     status: Status = "pending"
28 |     start_time: Optional[float] = None
   |                 ^^^^^^^^^^^^^^^
29 |     end_time: Optional[float] = None
30 |     deps: List[str] = field(default_factory=list)
   |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
  --> src/utils/mini_dag.py:29:15
   |
27 |     status: Status = "pending"
28 |     start_time: Optional[float] = None
29 |     end_time: Optional[float] = None
   |               ^^^^^^^^^^^^^^^
30 |     deps: List[str] = field(default_factory=list)
   |
help: Convert to `X | None`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/mini_dag.py:30:11
   |
28 |     start_time: Optional[float] = None
29 |     end_time: Optional[float] = None
30 |     deps: List[str] = field(default_factory=list)
   |           ^^^^
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/mini_dag.py:39:23
   |
37 |         self.run_id = run_id
38 |         self._logger = logging.getLogger(__name__)
39 |         self._stages: Dict[str, Stage] = {}
   |                       ^^^^
40 |         self._metadata: Dict[str, Any] = {
41 |             "dag_version": "1.0.0",  # Add version for future compatibility
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/mini_dag.py:40:25
   |
38 |         self._logger = logging.getLogger(__name__)
39 |         self._stages: Dict[str, Stage] = {}
40 |         self._metadata: Dict[str, Any] = {
   |                         ^^^^
41 |             "dag_version": "1.0.0",  # Add version for future compatibility
42 |             "input_path": "",
   |
help: Replace with `dict`

UP045 Use `X | None` for type annotations
  --> src/utils/mini_dag.py:52:41
   |
50 |         self._load()  # idempotent
51 |
52 |     def register(self, name: str, deps: Optional[List[str]] = None) -> None:
   |                                         ^^^^^^^^^^^^^^^^^^^
53 |         if name not in self._stages:
54 |             self._stages[name] = Stage(name=name, deps=list(deps or []))
   |
help: Convert to `X | None`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/mini_dag.py:52:50
   |
50 |         self._load()  # idempotent
51 |
52 |     def register(self, name: str, deps: Optional[List[str]] = None) -> None:
   |                                                  ^^^^
53 |         if name not in self._stages:
54 |             self._stages[name] = Stage(name=name, deps=list(deps or []))
   |
help: Replace with `list`

UP045 Use `X | None` for type annotations
  --> src/utils/mini_dag.py:95:50
   |
93 |         self._save()
94 |
95 |     def should_run(self, name: str, resume_from: Optional[str]) -> bool:
   |                                                  ^^^^^^^^^^^^^
96 |         """Return True if this stage should execute, considering resume semantics."""
97 |         if resume_from is None:
   |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:102:40
    |
100 |         return True
101 |
102 |     def get_status(self, name: str) -> Optional[Status]:
    |                                        ^^^^^^^^^^^^^^^^
103 |         """Get the status of a stage."""
104 |         if name in self._stages:
    |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:112:43
    |
110 |         return self.get_status(name) == "completed"
111 |
112 |     def get_last_completed_stage(self) -> Optional[str]:
    |                                           ^^^^^^^^^^^^^
113 |         """Get the name of the last completed stage, or None if no stages completed."""
114 |         completed_stages = [
    |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:131:36
    |
129 |         return last_completed
130 |
131 |     def get_current_stage(self) -> Optional[str]:
    |                                    ^^^^^^^^^^^^^
132 |         """Get the name of the currently running stage, or None if no stage is running."""
133 |         running_stages = [
    |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:145:22
    |
143 |         self,
144 |         stage_name: str,
145 |         interim_dir: Optional[Path] = None,
    |                      ^^^^^^^^^^^^^^
146 |     ) -> bool:
147 |         """Check if intermediate files exist for a given stage."""
    |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:169:22
    |
167 |     def get_smart_resume_stage(
168 |         self,
169 |         interim_dir: Optional[Path] = None,
    |                      ^^^^^^^^^^^^^^
170 |     ) -> Optional[str]:
171 |         """Intelligently determine where to resume from based on:
    |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:170:10
    |
168 |         self,
169 |         interim_dir: Optional[Path] = None,
170 |     ) -> Optional[str]:
    |          ^^^^^^^^^^^^^
171 |         """Intelligently determine where to resume from based on:
172 |         1. Last completed stage in state file
    |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:253:22
    |
251 |     def validate_resume_capability(
252 |         self,
253 |         interim_dir: Optional[Path] = None,
    |                      ^^^^^^^^^^^^^^
254 |     ) -> Tuple[bool, str, ResumeDecision]:
255 |         """Validate if the pipeline can resume from the current state.
    |
help: Convert to `X | None`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/mini_dag.py:254:10
    |
252 |         self,
253 |         interim_dir: Optional[Path] = None,
254 |     ) -> Tuple[bool, str, ResumeDecision]:
    |          ^^^^^
255 |         """Validate if the pipeline can resume from the current state.
    |
help: Replace with `tuple`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:345:22
    |
343 |     def get_resume_validation_summary(
344 |         self,
345 |         interim_dir: Optional[Path] = None,
    |                      ^^^^^^^^^^^^^^
346 |     ) -> Dict[str, Any]:
347 |         """Get a comprehensive summary of resume validation status.
    |
help: Convert to `X | None`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/mini_dag.py:346:10
    |
344 |         self,
345 |         interim_dir: Optional[Path] = None,
346 |     ) -> Dict[str, Any]:
    |          ^^^^
347 |         """Get a comprehensive summary of resume validation status.
    |
help: Replace with `dict`

UP045 Use `X | None` for type annotations
   --> src/utils/mini_dag.py:402:33
    |
400 |         self._save()
401 |
402 |     def get_input_hash(self) -> Optional[str]:
    |                                 ^^^^^^^^^^^^^
403 |         """Get the stored input hash from metadata."""
404 |         return self._metadata.get("input_hash")
    |
help: Convert to `X | None`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/opt_deps.py:8:1
  |
7 | import importlib
8 | from typing import Any, Dict, Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/opt_deps.py:19:30
   |
19 | def try_import_many(modules: Dict[str, str]) -> Dict[str, Optional[Any]]:
   |                              ^^^^
20 |     """Try to import multiple modules, return dict of results."""
21 |     result = {}
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/opt_deps.py:19:49
   |
19 | def try_import_many(modules: Dict[str, str]) -> Dict[str, Optional[Any]]:
   |                                                 ^^^^
20 |     """Try to import multiple modules, return dict of results."""
21 |     result = {}
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/parallel_utils.py:10:1
   |
 8 | import threading
 9 | from collections.abc import Iterable
10 | from typing import Any, Callable, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | from src.utils.logging_utils import get_logger
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/parallel_utils.py:10:1
   |
 8 | import threading
 9 | from collections.abc import Iterable
10 | from typing import Any, Callable, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | from src.utils.logging_utils import get_logger
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/parallel_utils.py:10:1
   |
 8 | import threading
 9 | from collections.abc import Iterable
10 | from typing import Any, Callable, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | from src.utils.logging_utils import get_logger
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/parallel_utils.py:22:37
   |
22 | def _load_parallelism_settings() -> Dict[str, Any]:
   |                                     ^^^^
23 |     """Load parallelism settings from config file."""
24 |     try:
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:115:12
    |
113 | def parallel_map(
114 |     func: Callable[[Any], Any],
115 |     items: List[Any],
    |            ^^^^
116 |     workers: Optional[int] = None,
117 |     backend: Optional[str] = None,
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:119:6
    |
117 |     backend: Optional[str] = None,
118 |     chunk_size: Optional[int] = None,
119 | ) -> List[Any]:
    |      ^^^^
120 |     """Parallel map function using joblib with deterministic ordering.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:158:21
    |
157 | def execute_chunked(
158 |     func: Callable[[List[Any]], List[Any]],
    |                     ^^^^
159 |     items: List[Any],
160 |     workers: Optional[int] = None,
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:158:33
    |
157 | def execute_chunked(
158 |     func: Callable[[List[Any]], List[Any]],
    |                                 ^^^^
159 |     items: List[Any],
160 |     workers: Optional[int] = None,
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:159:12
    |
157 | def execute_chunked(
158 |     func: Callable[[List[Any]], List[Any]],
159 |     items: List[Any],
    |            ^^^^
160 |     workers: Optional[int] = None,
161 |     backend: Optional[str] = None,
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:163:6
    |
161 |     backend: Optional[str] = None,
162 |     chunk_size: Optional[int] = None,
163 | ) -> List[Any]:
    |      ^^^^
164 |     """Execute function on chunks of items in parallel.
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> src/utils/parallel_utils.py:260:39
    |
260 | def select_backend(requested: str) -> Tuple[str, str]:
    |                                       ^^^^^
261 |     """Select the appropriate backend based on availability and platform.
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:369:16
    |
367 |         self,
368 |         func: Callable[[Any], Any],
369 |         items: List[Any],
    |                ^^^^
370 |         operation_name: str = "parallel_operation",
371 |     ) -> List[Any]:
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:371:10
    |
369 |         items: List[Any],
370 |         operation_name: str = "parallel_operation",
371 |     ) -> List[Any]:
    |          ^^^^
372 |         """Execute function in parallel or sequentially.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:428:25
    |
426 |     def execute_chunked(
427 |         self,
428 |         func: Callable[[List[Any]], Any],
    |                         ^^^^
429 |         items: List[Any],
430 |         chunk_size: Optional[int] = None,
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:429:16
    |
427 |         self,
428 |         func: Callable[[List[Any]], Any],
429 |         items: List[Any],
    |                ^^^^
430 |         chunk_size: Optional[int] = None,
431 |         operation_name: str = "parallel_operation",
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:432:10
    |
430 |         chunk_size: Optional[int] = None,
431 |         operation_name: str = "parallel_operation",
432 |     ) -> List[Any]:
    |          ^^^^
433 |         """Execute function in parallel with custom chunking.
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:606:14
    |
605 | def ensure_deterministic_order(
606 |     results: List[Any],
    |              ^^^^
607 |     sort_key: Optional[Callable] = None,
608 | ) -> List[Any]:
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parallel_utils.py:608:6
    |
606 |     results: List[Any],
607 |     sort_key: Optional[Callable] = None,
608 | ) -> List[Any]:
    |      ^^^^
609 |     """Ensure deterministic ordering of parallel results.
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/parity_validator.py:10:1
   |
 8 | import logging
 9 | from pathlib import Path
10 | from typing import Any, Dict, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import numpy as np
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> src/utils/parity_validator.py:10:1
   |
 8 | import logging
 9 | from pathlib import Path
10 | from typing import Any, Dict, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import numpy as np
   |

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/parity_validator.py:45:10
   |
43 |         pandas_df: pd.DataFrame,
44 |         run_id: str,
45 |     ) -> Tuple[bool, Dict[str, Any]]:
   |          ^^^^^
46 |         """Validate that DuckDB and pandas group stats are identical.
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/parity_validator.py:45:22
   |
43 |         pandas_df: pd.DataFrame,
44 |         run_id: str,
45 |     ) -> Tuple[bool, Dict[str, Any]]:
   |                      ^^^^
46 |         """Validate that DuckDB and pandas group stats are identical.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/parity_validator.py:87:24
   |
86 |         # Initialize parity report
87 |         parity_report: Dict[str, Any] = {
   |                        ^^^^
88 |             "rows_compared": len(duckdb_sorted),
89 |             "mismatches": 0,
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parity_validator.py:138:10
    |
136 |         pandas_series: pd.Series,
137 |         column_name: str,
138 |     ) -> Dict[str, Any]:
    |          ^^^^
139 |         """Validate parity for a single column.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parity_validator.py:244:10
    |
242 |         duckdb_df: pd.DataFrame,
243 |         pandas_df: pd.DataFrame,
244 |     ) -> Dict[str, Any]:
    |          ^^^^
245 |         """Validate that both DataFrames have matching dtypes.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parity_validator.py:255:24
    |
254 |         """
255 |         schema_report: Dict[str, Any] = {
    |                        ^^^^
256 |             "mismatches": 0,
257 |             "dtype_comparisons": {},
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parity_validator.py:318:50
    |
316 |         return dtype_lower
317 |
318 |     def _save_parity_report(self, parity_report: Dict[str, Any], run_id: str) -> None:
    |                                                  ^^^^
319 |         """Save parity report to file.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/parquet_size_reporter.py:13:1
   |
11 | import logging
12 | from pathlib import Path
13 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/parquet_size_reporter.py:13:1
   |
11 | import logging
12 | from pathlib import Path
13 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/parquet_size_reporter.py:32:55
   |
30 |         self.target_size_mb = target_size_mb
31 |
32 |     def analyze_parquet_file(self, file_path: str) -> Dict[str, Any]:
   |                                                       ^^^^
33 |         """Analyze a single Parquet file.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:104:59
    |
102 |             return {"error": str(e), "path": str(file_path), "size_mb": 0.0}
103 |
104 |     def _extract_compression_info(self, metadata: Any) -> Dict[str, Any]:
    |                                                           ^^^^
105 |         """Extract compression information from Parquet metadata."""
106 |         try:
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/parquet_size_reporter.py:156:54
    |
154 |         return compression_map.get(compression_code, f"unknown_{compression_code}")
155 |
156 |     def _extract_column_info(self, metadata: Any) -> List[Dict[str, Any]]:
    |                                                      ^^^^
157 |         """Extract detailed column information from Parquet metadata."""
158 |         columns = []
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:156:59
    |
154 |         return compression_map.get(compression_code, f"unknown_{compression_code}")
155 |
156 |     def _extract_column_info(self, metadata: Any) -> List[Dict[str, Any]]:
    |                                                           ^^^^
157 |         """Extract detailed column information from Parquet metadata."""
158 |         columns = []
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:228:10
    |
226 |         optimized_path: str,
227 |         run_id: str,
228 |     ) -> Dict[str, Any]:
    |          ^^^^
229 |         """Compare two Parquet files and report differences.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:257:32
    |
255 |             )
256 |
257 |             comparison_report: Dict[str, Any] = {
    |                                ^^^^
258 |                 "original": original_report,
259 |                 "optimized": optimized_report,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:290:46
    |
288 |         return comparison_report
289 |
290 |     def _save_size_report(self, size_report: Dict[str, Any], run_id: str) -> None:
    |                                              ^^^^
291 |         """Save size report to file.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:330:73
    |
330 | def load_or_build_report(run_id: str, target_size_mb: float = 180.0) -> Dict[str, Any]:
    |                                                                         ^^^^
331 |     """Load existing size report or build a new one for a given run.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/parquet_size_reporter.py:350:25
    |
348 |         try:
349 |             with open(report_path) as f:
350 |                 report: Dict[str, Any] = json.load(f)
    |                         ^^^^
351 |             logger.info(f"parquet_size_reporter | report_loaded | path={report_path}")
352 |             return report
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/perf_utils.py:10:1
   |
 8 | from collections.abc import Iterator
 9 | from contextlib import contextmanager
10 | from typing import List, Optional, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import numpy as np
   |

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/perf_utils.py:32:44
   |
32 | def narrow_sort(df: pd.DataFrame, columns: List[str]) -> pd.DataFrame:
   |                                            ^^^^
33 |     """Sort DataFrame using only specified columns to reduce memory copies.
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/perf_utils.py:154:20
    |
152 |     df: pd.DataFrame,
153 |     masks: dict,
154 |     reason_values: List[str],
    |                    ^^^^
155 |     manual_overrides: Optional[dict] = None,
156 | ) -> tuple[pd.Series, pd.Series]:
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/pipeline_constants.py:9:1
   |
 7 | """
 8 |
 9 | from typing import Dict, List, Literal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | # Pipeline stage names in execution order
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/pipeline_constants.py:9:1
   |
 7 | """
 8 |
 9 | from typing import Dict, List, Literal
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | # Pipeline stage names in execution order
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/pipeline_constants.py:25:27
   |
23 | # Expected intermediate files for each stage
24 | # Each stage requires all files from previous stages plus its own output
25 | STAGE_INTERMEDIATE_FILES: Dict[str, List[str]] = {
   |                           ^^^^
26 |     "normalization": [
27 |         "accounts_filtered.parquet",  # Pipeline produces filtered, not normalized
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/pipeline_constants.py:25:37
   |
23 | # Expected intermediate files for each stage
24 | # Each stage requires all files from previous stages plus its own output
25 | STAGE_INTERMEDIATE_FILES: Dict[str, List[str]] = {
   |                                     ^^^^
26 |     "normalization": [
27 |         "accounts_filtered.parquet",  # Pipeline produces filtered, not normalized
   |
help: Replace with `list`

UP045 Use `X | None` for type annotations
  --> src/utils/progress.py:14:16
   |
12 |     def __init__(
13 |         self,
14 |         total: Optional[int],
   |                ^^^^^^^^^^^^^
15 |         label: str,
16 |         step_every: int = 10_000,
   |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
  --> src/utils/progress.py:19:20
   |
17 |         secs_every: float = 5.0,
18 |         enable_tqdm: bool = False,
19 |         make_desc: Optional[Callable[[int, Optional[int], float], str]] = None,
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
20 |     ) -> None:
21 |         self.total = total
   |
help: Convert to `X | None`

UP045 Use `X | None` for type annotations
  --> src/utils/progress.py:19:44
   |
17 |         secs_every: float = 5.0,
18 |         enable_tqdm: bool = False,
19 |         make_desc: Optional[Callable[[int, Optional[int], float], str]] = None,
   |                                            ^^^^^^^^^^^^^
20 |     ) -> None:
21 |         self.total = total
   |
help: Convert to `X | None`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/resource_monitor.py:8:1
   |
 7 | import os
 8 | from typing import Any, Dict, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 |
10 | from src.utils.logging_utils import get_logger
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/resource_monitor.py:24:26
   |
24 | def get_system_info() -> Dict[str, Any]:
   |                          ^^^^
25 |     """Get basic system information."""
26 |     info: Dict[str, Any] = {
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/resource_monitor.py:26:11
   |
24 | def get_system_info() -> Dict[str, Any]:
25 |     """Get basic system information."""
26 |     info: Dict[str, Any] = {
   |           ^^^^
27 |         "cpu_count": os.cpu_count() or 1,
28 |         "psutil_available": PSUTIL_AVAILABLE,
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/run_management.py:10:1
   |
 8 | from datetime import datetime
 9 | from pathlib import Path
10 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | from src.utils.cache_utils import (
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/run_management.py:10:1
   |
 8 | from datetime import datetime
 9 | from pathlib import Path
10 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | from src.utils.cache_utils import (
   |

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/run_management.py:23:20
   |
23 | def list_runs() -> List[Dict[str, Any]]:
   |                    ^^^^
24 |     """Get a sorted list of all runs with metadata, with duplicates removed.
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/run_management.py:23:25
   |
23 | def list_runs() -> List[Dict[str, Any]]:
   |                         ^^^^
24 |     """Get a sorted list of all runs with metadata, with duplicates removed.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/run_management.py:52:47
   |
52 | def get_run_metadata(run_id: str) -> Optional[Dict[str, Any]]:
   |                                               ^^^^
53 |     """Get detailed metadata for a specific run.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/run_management.py:102:44
    |
102 | def validate_run_artifacts(run_id: str) -> Dict[str, Any]:
    |                                            ^^^^
103 |     """Validate that a run has all required artifacts.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/run_management.py:112:17
    |
111 |     """
112 |     validation: Dict[str, Any] = {
    |                 ^^^^
113 |         "run_exists": False,
114 |         "status": "unknown",
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/run_management.py:189:24
    |
187 | def format_run_display_name(
188 |     run_id: str,
189 |     metadata: Optional[Dict[str, Any]] = None,
    |                        ^^^^
190 | ) -> str:
191 |     """Format a run ID for display in the UI.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/run_management.py:226:47
    |
226 | def load_stage_state(run_id: str) -> Optional[Dict[str, Any]]:
    |                                               ^^^^
227 |     """Load and parse MiniDAG stage state for a run.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/schema_utils.py:12:1
   |
10 | import re
11 | from collections.abc import Mapping
12 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/schema_utils.py:12:1
   |
10 | import re
11 | from collections.abc import Mapping
12 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/schema_utils.py:96:32
   |
96 | def get_canonical_columns() -> Dict[str, str]:
   |                                ^^^^
97 |     """Get mapping of canonical column names to their constants.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:161:24
    |
159 | def resolve_schema(
160 |     df: pd.DataFrame,
161 |     settings: Optional[Dict[str, Any]] = None,
    |                        ^^^^
162 |     cli_overrides: Optional[Dict[str, str]] = None,
163 |     input_filename: Optional[str] = None,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:162:29
    |
160 |     df: pd.DataFrame,
161 |     settings: Optional[Dict[str, Any]] = None,
162 |     cli_overrides: Optional[Dict[str, str]] = None,
    |                             ^^^^
163 |     input_filename: Optional[str] = None,
164 | ) -> Mapping[str, str]:
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:241:20
    |
239 | def _apply_cli_overrides(
240 |     df: pd.DataFrame,
241 |     cli_overrides: Dict[str, str],
    |                    ^^^^
242 | ) -> Dict[str, str]:
243 |     """Apply CLI column overrides."""
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:242:6
    |
240 |     df: pd.DataFrame,
241 |     cli_overrides: Dict[str, str],
242 | ) -> Dict[str, str]:
    |      ^^^^
243 |     """Apply CLI column overrides."""
244 |     mapping = {}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:261:15
    |
259 |     df: pd.DataFrame,
260 |     input_filename: str,
261 |     settings: Dict[str, Any],
    |               ^^^^
262 | ) -> Optional[Dict[str, str]]:
263 |     """Match filename against configured templates."""
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:262:15
    |
260 |     input_filename: str,
261 |     settings: Dict[str, Any],
262 | ) -> Optional[Dict[str, str]]:
    |               ^^^^
263 |     """Match filename against configured templates."""
264 |     schema_config = settings.get("schema", {})
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:285:49
    |
285 | def _match_synonyms(df: pd.DataFrame, settings: Dict[str, Any]) -> Dict[str, str]:
    |                                                 ^^^^
286 |     """Match columns using configured synonyms."""
287 |     schema_config = settings.get("schema", {})
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:285:68
    |
285 | def _match_synonyms(df: pd.DataFrame, settings: Dict[str, Any]) -> Dict[str, str]:
    |                                                                    ^^^^
286 |     """Match columns using configured synonyms."""
287 |     schema_config = settings.get("schema", {})
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:295:14
    |
293 | def _build_mapping_from_aliases(
294 |     df: pd.DataFrame,
295 |     aliases: Dict[str, List[str]],
    |              ^^^^
296 | ) -> Dict[str, str]:
297 |     """Build column mapping from aliases configuration."""
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:295:24
    |
293 | def _build_mapping_from_aliases(
294 |     df: pd.DataFrame,
295 |     aliases: Dict[str, List[str]],
    |                        ^^^^
296 | ) -> Dict[str, str]:
297 |     """Build column mapping from aliases configuration."""
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:296:6
    |
294 |     df: pd.DataFrame,
295 |     aliases: Dict[str, List[str]],
296 | ) -> Dict[str, str]:
    |      ^^^^
297 |     """Build column mapping from aliases configuration."""
298 |     mapping = {}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:326:51
    |
326 | def _apply_heuristics(df: pd.DataFrame, settings: Dict[str, Any]) -> Dict[str, str]:
    |                                                   ^^^^
327 |     """Apply heuristics for column matching."""
328 |     mapping = {}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:326:70
    |
326 | def _apply_heuristics(df: pd.DataFrame, settings: Dict[str, Any]) -> Dict[str, str]:
    |                                                                      ^^^^
327 |     """Apply heuristics for column matching."""
328 |     mapping = {}
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:360:24
    |
359 | def _find_best_similarity_match(
360 |     available_columns: List[str],
    |                        ^^^^
361 |     target_terms: List[str],
362 |     threshold: int = 80,
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:361:19
    |
359 | def _find_best_similarity_match(
360 |     available_columns: List[str],
361 |     target_terms: List[str],
    |                   ^^^^
362 |     threshold: int = 80,
363 | ) -> Optional[str]:
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:385:59
    |
385 | def _find_id_columns(df: pd.DataFrame, available_columns: List[str]) -> List[str]:
    |                                                           ^^^^
386 |     """Find columns that look like IDs based on data patterns."""
387 |     id_candidates = []
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:385:73
    |
385 | def _find_id_columns(df: pd.DataFrame, available_columns: List[str]) -> List[str]:
    |                                                                         ^^^^
386 |     """Find columns that look like IDs based on data patterns."""
387 |     id_candidates = []
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:407:61
    |
407 | def _find_date_columns(df: pd.DataFrame, available_columns: List[str]) -> List[str]:
    |                                                             ^^^^
408 |     """Find columns that look like dates based on data patterns."""
409 |     date_candidates = []
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/schema_utils.py:407:75
    |
407 | def _find_date_columns(df: pd.DataFrame, available_columns: List[str]) -> List[str]:
    |                                                                           ^^^^
408 |     """Find columns that look like dates based on data patterns."""
409 |     date_candidates = []
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:432:41
    |
432 | def _validate_required_columns(mapping: Dict[str, str]) -> bool:
    |                                         ^^^^
433 |     """Validate that required columns are present in mapping."""
434 |     required_columns = [ACCOUNT_NAME]
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:473:50
    |
473 | def load_schema_mapping(run_id: str) -> Optional[Dict[str, str]]:
    |                                                  ^^^^
474 |     """Load schema mapping from file.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:505:29
    |
505 | def invert_mapping(mapping: Dict[str, str]) -> Dict[str, str]:
    |                             ^^^^
506 |     """Invert mapping from canonical -> actual to actual -> canonical.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:505:48
    |
505 | def invert_mapping(mapping: Dict[str, str]) -> Dict[str, str]:
    |                                                ^^^^
506 |     """Invert mapping from canonical -> actual to actual -> canonical.
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/schema_utils.py:571:34
    |
569 | def apply_canonical_rename(
570 |     df: pd.DataFrame,
571 |     mapping_canonical_to_actual: Dict[str, str],
    |                                  ^^^^
572 | ) -> pd.DataFrame:
573 |     """Rename columns from ACTUAL -> CANONICAL using the inverted mapping.
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/settings.py:9:1
   |
 7 | import os
 8 | from functools import lru_cache
 9 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | __all__ = ["get_settings", "get_ui_perf", "validate_settings"]
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> src/utils/settings.py:9:1
   |
 7 | import os
 8 | from functools import lru_cache
 9 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | __all__ = ["get_settings", "get_ui_perf", "validate_settings"]
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/settings.py:16:23
   |
14 | # TODO: Implement get_settings with LRU caching
15 | @lru_cache(maxsize=1)
16 | def get_settings() -> Dict[str, Any]:
   |                       ^^^^
17 |     """Get application settings with caching."""
18 |     # TODO: Implement actual settings loading from config files
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/settings.py:49:27
   |
49 | def get_ui_perf(settings: Dict[str, Any] | None = None) -> Dict[str, Any]:
   |                           ^^^^
50 |     """Returns ui_perf settings with defaults and force flag precedence.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/settings.py:49:60
   |
49 | def get_ui_perf(settings: Dict[str, Any] | None = None) -> Dict[str, Any]:
   |                                                            ^^^^
50 |     """Returns ui_perf settings with defaults and force flag precedence.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/settings.py:89:33
   |
89 | def validate_settings(settings: Dict[str, Any] | None = None) -> List[str]:
   |                                 ^^^^
90 |     """Returns list of validation warnings.
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/settings.py:89:66
   |
89 | def validate_settings(settings: Dict[str, Any] | None = None) -> List[str]:
   |                                                                  ^^^^
90 |     """Returns list of validation warnings.
   |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/simple_state.py:8:1
  |
7 | from dataclasses import dataclass, field
8 | from typing import Any, Dict, List, Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/utils/simple_state.py:8:1
  |
7 | from dataclasses import dataclass, field
8 | from typing import Any, Dict, List, Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/utils/simple_state.py:8:1
  |
7 | from dataclasses import dataclass, field
8 | from typing import Any, Dict, List, Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:24:22
   |
23 |     # Backend selection per run
24 |     backend_choices: Dict[str, str] = field(default_factory=dict)  # run_id -> backend
   |                      ^^^^
25 |
26 |     # Group details state (lazy loading)
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:27:24
   |
26 |     # Group details state (lazy loading)
27 |     details_requested: Dict[Tuple[str, str], bool] = field(
   |                        ^^^^
28 |         default_factory=dict,
29 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/simple_state.py:27:29
   |
26 |     # Group details state (lazy loading)
27 |     details_requested: Dict[Tuple[str, str], bool] = field(
   |                             ^^^^^
28 |         default_factory=dict,
29 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:30:21
   |
28 |         default_factory=dict,
29 |     )  # (run_id, group_id) -> bool
30 |     details_loaded: Dict[Tuple[str, str], bool] = field(
   |                     ^^^^
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/simple_state.py:30:26
   |
28 |         default_factory=dict,
29 |     )  # (run_id, group_id) -> bool
30 |     details_loaded: Dict[Tuple[str, str], bool] = field(
   |                          ^^^^^
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:33:19
   |
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
33 |     details_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                   ^^^^
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/simple_state.py:33:24
   |
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
33 |     details_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                        ^^^^^
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> data
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/simple_state.py:33:41
   |
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
33 |     details_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                                         ^^^^
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> data
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:33:46
   |
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
33 |     details_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                                              ^^^^
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:38:24
   |
37 |     # Alias cross-references state
38 |     aliases_requested: Dict[Tuple[str, str], bool] = field(
   |                        ^^^^
39 |         default_factory=dict,
40 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/simple_state.py:38:29
   |
37 |     # Alias cross-references state
38 |     aliases_requested: Dict[Tuple[str, str], bool] = field(
   |                             ^^^^^
39 |         default_factory=dict,
40 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:41:19
   |
39 |         default_factory=dict,
40 |     )  # (run_id, group_id) -> bool
41 |     aliases_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                   ^^^^
42 |         default_factory=dict,
43 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/simple_state.py:41:24
   |
39 |         default_factory=dict,
40 |     )  # (run_id, group_id) -> bool
41 |     aliases_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                        ^^^^^
42 |         default_factory=dict,
43 |     )  # (run_id, group_id) -> data
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/simple_state.py:41:41
   |
39 |         default_factory=dict,
40 |     )  # (run_id, group_id) -> bool
41 |     aliases_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                                         ^^^^
42 |         default_factory=dict,
43 |     )  # (run_id, group_id) -> data
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/simple_state.py:41:46
   |
39 |         default_factory=dict,
40 |     )  # (run_id, group_id) -> bool
41 |     aliases_data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                                              ^^^^
42 |         default_factory=dict,
43 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/simple_state.py:184:11
    |
182 |     run_id: str,
183 |     group_id: str,
184 |     data: List[Dict[str, Any]],
    |           ^^^^
185 | ) -> None:
186 |     """Mark details as loaded and store the data."""
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/simple_state.py:184:16
    |
182 |     run_id: str,
183 |     group_id: str,
184 |     data: List[Dict[str, Any]],
    |                ^^^^
185 | ) -> None:
186 |     """Mark details as loaded and store the data."""
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> src/utils/simple_state.py:196:15
    |
194 |     run_id: str,
195 |     group_id: str,
196 | ) -> Optional[List[Dict[str, Any]]]:
    |               ^^^^
197 |     """Get the loaded details data for a group."""
198 |     return app_state.details_data.get((run_id, group_id))
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> src/utils/simple_state.py:196:20
    |
194 |     run_id: str,
195 |     group_id: str,
196 | ) -> Optional[List[Dict[str, Any]]]:
    |                    ^^^^
197 |     """Get the loaded details data for a group."""
198 |     return app_state.details_data.get((run_id, group_id))
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
 --> src/utils/sql_utils.py:7:1
  |
5 | """
6 |
7 | from typing import List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/utils/sql_utils.py:7:1
  |
5 | """
6 |
7 | from typing import List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/sql_utils.py:10:23
   |
10 | def in_clause(values: List) -> Tuple[str, List]:
   |                       ^^^^
11 |     """Return 'IN (?,?,...)' and corresponding params, for DuckDB.
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/sql_utils.py:10:32
   |
10 | def in_clause(values: List) -> Tuple[str, List]:
   |                                ^^^^^
11 |     """Return 'IN (?,?,...)' and corresponding params, for DuckDB.
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/sql_utils.py:10:43
   |
10 | def in_clause(values: List) -> Tuple[str, List]:
   |                                           ^^^^
11 |     """Return 'IN (?,?,...)' and corresponding params, for DuckDB.
   |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/state_utils.py:8:1
  |
7 | from dataclasses import dataclass, field
8 | from typing import Any, Dict, List, Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> src/utils/state_utils.py:8:1
  |
7 | from dataclasses import dataclass, field
8 | from typing import Any, Dict, List, Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> src/utils/state_utils.py:8:1
  |
7 | from dataclasses import dataclass, field
8 | from typing import Any, Dict, List, Optional, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:23:13
   |
21 |     """Backend selection state per run."""
22 |
23 |     groups: Dict[str, str] = field(default_factory=dict)
   |             ^^^^
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:30:16
   |
28 |     """Group details state."""
29 |
30 |     requested: Dict[Tuple[str, str], bool] = field(
   |                ^^^^
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:30:21
   |
28 |     """Group details state."""
29 |
30 |     requested: Dict[Tuple[str, str], bool] = field(
   |                     ^^^^^
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:33:13
   |
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
33 |     loaded: Dict[Tuple[str, str], bool] = field(
   |             ^^^^
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:33:18
   |
31 |         default_factory=dict,
32 |     )  # (run_id, group_id) -> bool
33 |     loaded: Dict[Tuple[str, str], bool] = field(
   |                  ^^^^^
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:36:11
   |
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> bool
36 |     data: Dict[Tuple[str, str], Dict[str, Any]] = field(
   |           ^^^^
37 |         default_factory=dict,
38 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:36:16
   |
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> bool
36 |     data: Dict[Tuple[str, str], Dict[str, Any]] = field(
   |                ^^^^^
37 |         default_factory=dict,
38 |     )  # (run_id, group_id) -> data
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:36:33
   |
34 |         default_factory=dict,
35 |     )  # (run_id, group_id) -> bool
36 |     data: Dict[Tuple[str, str], Dict[str, Any]] = field(
   |                                 ^^^^
37 |         default_factory=dict,
38 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:45:16
   |
43 |     """Explain metadata state."""
44 |
45 |     requested: Dict[Tuple[str, str], bool] = field(
   |                ^^^^
46 |         default_factory=dict,
47 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:45:21
   |
43 |     """Explain metadata state."""
44 |
45 |     requested: Dict[Tuple[str, str], bool] = field(
   |                     ^^^^^
46 |         default_factory=dict,
47 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:48:11
   |
46 |         default_factory=dict,
47 |     )  # (run_id, group_id) -> bool
48 |     data: Dict[Tuple[str, str], Any] = field(
   |           ^^^^
49 |         default_factory=dict,
50 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:48:16
   |
46 |         default_factory=dict,
47 |     )  # (run_id, group_id) -> bool
48 |     data: Dict[Tuple[str, str], Any] = field(
   |                ^^^^^
49 |         default_factory=dict,
50 |     )  # (run_id, group_id) -> data
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:57:16
   |
55 |     """Alias cross-references state."""
56 |
57 |     requested: Dict[Tuple[str, str], bool] = field(
   |                ^^^^
58 |         default_factory=dict,
59 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:57:21
   |
55 |     """Alias cross-references state."""
56 |
57 |     requested: Dict[Tuple[str, str], bool] = field(
   |                     ^^^^^
58 |         default_factory=dict,
59 |     )  # (run_id, group_id) -> bool
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:60:11
   |
58 |         default_factory=dict,
59 |     )  # (run_id, group_id) -> bool
60 |     data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |           ^^^^
61 |         default_factory=dict,
62 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> src/utils/state_utils.py:60:16
   |
58 |         default_factory=dict,
59 |     )  # (run_id, group_id) -> bool
60 |     data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                ^^^^^
61 |         default_factory=dict,
62 |     )  # (run_id, group_id) -> data
   |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
  --> src/utils/state_utils.py:60:33
   |
58 |         default_factory=dict,
59 |     )  # (run_id, group_id) -> bool
60 |     data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                                 ^^^^
61 |         default_factory=dict,
62 |     )  # (run_id, group_id) -> data
   |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/state_utils.py:60:38
   |
58 |         default_factory=dict,
59 |     )  # (run_id, group_id) -> bool
60 |     data: Dict[Tuple[str, str], List[Dict[str, Any]]] = field(
   |                                      ^^^^
61 |         default_factory=dict,
62 |     )  # (run_id, group_id) -> data
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> src/utils/ui_session.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | # TODO: Import from opt_deps when implemented
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/ui_session.py:18:25
   |
16 |         # TODO: Implement actual streamlit detection
17 |         self._use_streamlit = use_streamlit  # and STREAMLIT is not None
18 |         self._fallback: Dict[str, Any] = {}
   |                         ^^^^
19 |
20 |     def get(self, key: str, default: Any = None) -> Any:
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> src/utils/union_find.py:8:1
   |
 7 | import logging
 8 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 9 |
10 | logger = logging.getLogger(__name__)
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/union_find.py:22:22
   |
20 |     def __init__(self) -> None:
21 |         """Initialize an empty disjoint set."""
22 |         self.parent: Dict[Any, Any] = {}
   |                      ^^^^
23 |         self.rank: Dict[Any, int] = {}
24 |         self.size: Dict[Any, int] = {}
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/union_find.py:23:20
   |
21 |         """Initialize an empty disjoint set."""
22 |         self.parent: Dict[Any, Any] = {}
23 |         self.rank: Dict[Any, int] = {}
   |                    ^^^^
24 |         self.size: Dict[Any, int] = {}
25 |         self._count = 0
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> src/utils/union_find.py:24:20
   |
22 |         self.parent: Dict[Any, Any] = {}
23 |         self.rank: Dict[Any, int] = {}
24 |         self.size: Dict[Any, int] = {}
   |                    ^^^^
25 |         self._count = 0
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/contracts/test_parquet_contracts.py:11:1
   |
 9 | import tempfile
10 | from pathlib import Path
11 | from typing import Any, Dict, List, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pyarrow as pa
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/contracts/test_parquet_contracts.py:11:1
   |
 9 | import tempfile
10 | from pathlib import Path
11 | from typing import Any, Dict, List, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pyarrow as pa
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> tests/contracts/test_parquet_contracts.py:11:1
   |
 9 | import tempfile
10 | from pathlib import Path
11 | from typing import Any, Dict, List, Set
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pyarrow as pa
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/contracts/test_parquet_contracts.py:73:67
   |
73 | def validate_parquet_schema(file_path: str, parquet_type: str) -> Dict[str, Any]:
   |                                                                   ^^^^
74 |     """Validate that a parquet file has the required schema.
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/contracts/test_parquet_contracts.py:629:25
    |
628 | @pytest.fixture
629 | def artifact_paths() -> Dict[str, str]:
    |                         ^^^^
630 |     """Mock artifact paths for testing."""
631 |     # This would be replaced with actual artifact paths in real tests
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/helpers/ingest.py:7:1
  |
5 | """
6 |
7 | from typing import Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^
8 |
9 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/helpers/ingest.py:128:16
    |
127 | def create_test_fixture_data(
128 |     base_data: Dict[str, list],
    |                ^^^^
129 |     required_columns: list | None = None,
130 | ) -> pd.DataFrame:
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/lints/test_no_schema_fragile_hardcoding.py:9:1
   |
 7 | import re
 8 | from pathlib import Path
 9 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | import pytest
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> tests/lints/test_no_schema_fragile_hardcoding.py:9:1
   |
 7 | import re
 8 | from pathlib import Path
 9 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | import pytest
   |

UP006 Use `list` instead of `List` for type annotation
   --> tests/lints/test_no_schema_fragile_hardcoding.py:111:59
    |
109 |         return False
110 |
111 |     def find_fragile_references(self, file_path: Path) -> List[Tuple[int, str]]:
    |                                                           ^^^^
112 |         """Find schema-fragile references in a file."""
113 |         references = []
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> tests/lints/test_no_schema_fragile_hardcoding.py:111:64
    |
109 |         return False
110 |
111 |     def find_fragile_references(self, file_path: Path) -> List[Tuple[int, str]]:
    |                                                                ^^^^^
112 |         """Find schema-fragile references in a file."""
113 |         references = []
    |
help: Replace with `tuple`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/perf/test_groups_bench.py:10:1
   |
 8 | import time
 9 | from pathlib import Path
10 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/perf/test_groups_bench.py:10:1
   |
 8 | import time
 9 | from pathlib import Path
10 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/perf/test_groups_bench.py:110:6
    |
108 |     synthetic_10k_data: pd.DataFrame,
109 |     tmp_path: Path,
110 | ) -> Dict[str, str]:
    |      ^^^^
111 |     """Create temporary parquet files for 10k dataset."""
112 |     review_ready_path = tmp_path / "review_ready_10k.parquet"
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/perf/test_groups_bench.py:145:6
    |
143 |     synthetic_100k_data: pd.DataFrame,
144 |     tmp_path: Path,
145 | ) -> Dict[str, str]:
    |      ^^^^
146 |     """Create temporary parquet files for 100k dataset."""
147 |     review_ready_path = tmp_path / "review_ready_100k.parquet"
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/perf/test_groups_bench.py:180:6
    |
178 |     synthetic_1m_data: pd.DataFrame,
179 |     tmp_path: Path,
180 | ) -> Dict[str, str]:
    |      ^^^^
181 |     """Create temporary parquet files for 1M dataset."""
182 |     review_ready_path = tmp_path / "review_ready_1m.parquet"
    |
help: Replace with `dict`

B023 Function definition does not bind loop variable `sort_key`
   --> tests/perf/test_groups_bench.py:489:48
    |
488 |             def run():
489 |                 return get_groups_page(run_id, sort_key, 1, 50, {})
    |                                                ^^^^^^^^
490 |
491 |             result = benchmark.pedantic(run, rounds=3, warmup_rounds=1)
    |

UP006 Use `list` instead of `List` for type annotation
   --> tests/perf/test_groups_bench.py:513:30
    |
511 |         )
512 |
513 |         filter_combinations: List[Dict[str, Any]] = [
    |                              ^^^^
514 |             {},  # No filters
515 |             {"dispositions": ["keep"]},  # Dispositions only
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/perf/test_groups_bench.py:513:35
    |
511 |         )
512 |
513 |         filter_combinations: List[Dict[str, Any]] = [
    |                                   ^^^^
514 |             {},  # No filters
515 |             {"dispositions": ["keep"]},  # Dispositions only
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/perf/test_groups_bench.py:521:22
    |
520 |         for filter_dict in filter_combinations:
521 |             filters: Dict[str, Any] = filter_dict
    |                      ^^^^
522 |
523 |             def run():
    |
help: Replace with `dict`

B023 Function definition does not bind loop variable `filters`
   --> tests/perf/test_groups_bench.py:524:76
    |
523 |             def run():
524 |                 return get_groups_page(run_id, "Group Size (Desc)", 1, 50, filters)
    |                                                                            ^^^^^^^
525 |
526 |             result = benchmark.pedantic(run, rounds=3, warmup_rounds=1)
    |

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_alias_equivalence.py:3:1
  |
1 | """Test alias matching equivalence between legacy and optimized paths."""
2 |
3 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_alias_equivalence.py:165:15
    |
163 |     df_groups = ensure_required_columns(df_groups, ["group_id", "account_id"])
164 |
165 |     settings: Dict[str, Any] = {
    |               ^^^^
166 |         "similarity": {"high": 85, "max_alias_pairs": 1000},
167 |         "parallelism": {"workers": 2, "backend": "threading", "chunk_size": 100},
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_alias_equivalence.py:206:15
    |
204 |     df_groups = ensure_required_columns(df_groups, ["group_id", "account_id"])
205 |
206 |     settings: Dict[str, Any] = {
    |               ^^^^
207 |         "similarity": {"high": 85, "max_alias_pairs": 1000},
208 |         "parallelism": {"workers": 2, "backend": "threading", "chunk_size": 100},
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_alias_matching_parallelism.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 | from unittest.mock import Mock
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_alias_matching_parallelism.py:63:24
   |
61 |         )
62 |
63 |         self.settings: Dict[str, Any] = {
   |                        ^^^^
64 |             "similarity": {"high": 92, "max_alias_pairs": 1000},
65 |             "alias": {"optimize": True, "progress_interval_s": 1.0},
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_cache_keys.py:6:1
  |
4 | import tempfile
5 | import unittest
6 | from typing import Any, Dict, List
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pytest
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> tests/test_cache_keys.py:6:1
  |
4 | import tempfile
5 | import unittest
6 | from typing import Any, Dict, List
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pytest
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cache_keys.py:224:29
    |
222 |                     mock_get_paths2.return_value = {"review_ready_parquet": temp_path}
223 |
224 |                     inputs: Dict[str, Any] = {
    |                             ^^^^
225 |                         "run_id": "test_run",
226 |                         "sort_key": "Group Size (Desc)",
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_cache_keys.py:298:12
    |
297 |     # Test with empty list
298 |     empty: List[str] = []
    |            ^^^^
299 |     in_sql, params = _in_clause(empty)
300 |     assert in_sql == "IN (NULL)"
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_cache_utils.py:5:1
  |
3 | import json
4 | import os
5 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | import pytest
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cache_utils.py:109:17
    |
107 |     workspace = cache_utils_workspace
108 |
109 |     failed_run: Dict[str, Any] = {
    |                 ^^^^
110 |         "run_id": "failed_456_20231201120001",
111 |         "status": "failed",
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cache_utils.py:139:16
    |
137 |     # Add to run_index.json
138 |     run_index_path = workspace / "data" / "run_index.json"
139 |     run_index: Dict[str, Any]
    |                ^^^^
140 |     if run_index_path.exists():
141 |         with open(run_index_path) as f:
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
 --> tests/test_changelog_dates.py:7:1
  |
5 | from datetime import datetime
6 | from pathlib import Path
7 | from typing import List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
 --> tests/test_changelog_dates.py:7:1
  |
5 | from datetime import datetime
6 | from pathlib import Path
7 | from typing import List, Tuple
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |

UP006 Use `list` instead of `List` for type annotation
  --> tests/test_changelog_dates.py:10:54
   |
10 | def extract_phase_headers(changelog_content: str) -> List[Tuple[str, str, str]]:
   |                                                      ^^^^
11 |     """Extract all Phase headers and their dates from CHANGELOG.md content.
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> tests/test_changelog_dates.py:10:59
   |
10 | def extract_phase_headers(changelog_content: str) -> List[Tuple[str, str, str]]:
   |                                                           ^^^^^
11 |     """Extract all Phase headers and their dates from CHANGELOG.md content.
   |
help: Replace with `tuple`

B011 Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
  --> tests/test_changelog_dates.py:86:16
   |
84 |         for invalid in invalid_dates:
85 |             error_msg += f"  Phase {invalid['phase']}: '{invalid['date']}' in '{invalid['header']}'\n"
86 |         assert False, error_msg
   |                ^^^^^
87 |
88 |     # All dates are valid
   |
help: Replace `assert False`

B007 Loop control variable `header_line` not used within loop body
   --> tests/test_changelog_dates.py:105:30
    |
103 |     # Parse dates and check chronological order
104 |     dates = []
105 |     for phase_num, date_str, header_line in headers:
    |                              ^^^^^^^^^^^
106 |         try:
107 |             date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    |
help: Rename unused `header_line` to `_header_line`

B011 Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
   --> tests/test_changelog_dates.py:136:24
    |
134 |                 error_msg = f"Changelog dates not in chronological order within Phase {major_minor}:\n"
135 |                 error_msg += f"  Phase {group_dates[i-1][0]} ({group_dates[i-1][2]}) comes before Phase {group_dates[i][0]} ({group_d…
136 |                 assert False, error_msg
    |                        ^^^^^
137 |
138 |     print(
    |
help: Replace `assert False`

B007 Loop control variable `date_str` not used within loop body
   --> tests/test_changelog_dates.py:156:20
    |
154 |     # Validate Phase number format
155 |     invalid_phases = []
156 |     for phase_num, date_str, header_line in headers:
    |                    ^^^^^^^^
157 |         # Expected format: major.minor[.patch][suffix]
158 |         # Examples: 1.18, 1.18.1, 1.17.5c
    |
help: Rename unused `date_str` to `_date_str`

B011 Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
   --> tests/test_changelog_dates.py:167:16
    |
165 |         for invalid in invalid_phases:
166 |             error_msg += f"  '{invalid['phase']}' in '{invalid['header']}'\n"
167 |         assert False, error_msg
    |                ^^^^^
168 |
169 |     print(f"✅ All {len(headers)} Phase numbers follow expected format")
    |
help: Replace `assert False`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_cleanup.py:10:1
   |
 8 | import sys
 9 | from pathlib import Path
10 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 | from unittest.mock import MagicMock, patch
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cleanup.py:132:25
    |
131 |         # No input paths
132 |         empty_run_data: Dict[str, Any] = {}
    |                         ^^^^
133 |         assert detect_run_type(empty_run_data) == "dev"
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cleanup.py:138:19
    |
136 |         """Test edge cases in run type detection."""
137 |         # Empty input paths
138 |         run_data: Dict[str, Any] = {"input_paths": []}
    |                   ^^^^
139 |         assert detect_run_type(run_data) == "dev"
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cleanup.py:165:19
    |
163 |         """Test age calculation with invalid timestamps."""
164 |         # No timestamp
165 |         run_data: Dict[str, Any] = {}
    |                   ^^^^
166 |         age = get_run_age_days(run_data)
167 |         assert age == 999
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_cleanup_reconcile.py:8:1
  |
6 | import json
7 | from pathlib import Path
8 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
9 | from unittest.mock import MagicMock, patch
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cleanup_reconcile.py:160:24
    |
159 |             # Test discover_candidates with reconciliation
160 |             run_index: Dict[str, Any] = {}
    |                        ^^^^
161 |             plan = discover_candidates(
162 |                 run_index=run_index,
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_cleanup_reconcile.py:259:24
    |
258 |             # Test discover_candidates with reconciliation and empty index
259 |             run_index: Dict[str, Any] = {}
    |                        ^^^^
260 |             plan = discover_candidates(
261 |                 run_index=run_index,
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_details_fast_path.py:8:1
  |
7 | from pathlib import Path
8 | from typing import Any, Dict, List
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
9 | from unittest.mock import MagicMock, patch
  |

UP035 `typing.List` is deprecated, use `list` instead
 --> tests/test_details_fast_path.py:8:1
  |
7 | from pathlib import Path
8 | from typing import Any, Dict, List
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
9 | from unittest.mock import MagicMock, patch
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_details_fast_path.py:28:21
   |
26 |     def __init__(self, capacity: int = 16) -> None:
27 |         self.capacity = capacity
28 |         self.cache: Dict[Any, Any] = {}
   |                     ^^^^
29 |         self.access_order: List[Any] = []
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> tests/test_details_fast_path.py:29:28
   |
27 |         self.capacity = capacity
28 |         self.cache: Dict[Any, Any] = {}
29 |         self.access_order: List[Any] = []
   |                            ^^^^
30 |
31 |     def get(self, key: Any) -> Any:
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> tests/test_details_fast_path.py:52:25
   |
50 |     def invalidate_run(self, run_id: str) -> None:
51 |         """Remove all cache entries for a specific run."""
52 |         keys_to_remove: List[Any] = []
   |                         ^^^^
53 |         for key in self.cache.keys():
54 |             if (isinstance(key, tuple) and len(key) > 0 and key[0] == run_id) or (
   |
help: Replace with `list`

F821 Undefined name `temp_dir`
   --> tests/test_duckdb_group_stats_phase1354.py:154:75
    |
152 |             "engine": {"duckdb": {"threads": 2}},
153 |             "io": {"parquet": {"compression": "zstd"}},
154 |             "group_stats": {"memoization": {"enable": True}, "cache_dir": temp_dir},
    |                                                                           ^^^^^^^^
155 |         }
156 |         run_id = "test_run"
    |

F821 Undefined name `temp_dir`
   --> tests/test_duckdb_group_stats_phase1354.py:200:75
    |
198 |             "engine": {"duckdb": {"threads": 2}},
199 |             "io": {"parquet": {"compression": "zstd"}},
200 |             "group_stats": {"memoization": {"enable": True}, "cache_dir": temp_dir},
    |                                                                           ^^^^^^^^
201 |         }
202 |         run_id = "test_run"
    |

F821 Undefined name `temp_dir`
   --> tests/test_duckdb_group_stats_phase1354.py:207:30
    |
205 |         try:
206 |             # Write optimized parquet
207 |             output_path = f"{temp_dir}/test_output.parquet"
    |                              ^^^^^^^^
208 |             metadata = engine.write_optimized_parquet(df, output_path)
    |

F821 Undefined name `temp_dir`
   --> tests/test_duckdb_group_stats_phase1354.py:286:24
    |
284 |     with tempfile.TemporaryDirectory() as _temp_dir:
285 |         # Create test parquet file
286 |         test_path = f"{temp_dir}/test.parquet"
    |                        ^^^^^^^^
287 |         df.to_parquet(test_path, compression="snappy")
    |

F821 Undefined name `temp_dir`
   --> tests/test_duckdb_group_stats_phase1354.py:348:75
    |
346 |             "engine": {"duckdb": {"threads": 2}},
347 |             "io": {"parquet": {"compression": "zstd"}},
348 |             "group_stats": {"memoization": {"enable": True}, "cache_dir": temp_dir},
    |                                                                           ^^^^^^^^
349 |         }
    |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_duckdb_query_params.py:14:1
   |
12 | # Mark all tests in this file as requiring DuckDB
13 | pytestmark = [pytest.mark.duckdb]
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> tests/test_duckdb_query_params.py:14:1
   |
12 | # Mark all tests in this file as requiring DuckDB
13 | pytestmark = [pytest.mark.duckdb]
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

UP006 Use `list` instead of `List` for type annotation
  --> tests/test_duckdb_query_params.py:17:50
   |
17 | def find_string_interpolations(filename: str) -> List[ast.JoinedStr]:
   |                                                  ^^^^
18 |     """Find f-string interpolations that might be actual SQL queries.
   |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_e2e_run_id_and_determinism.py:14:1
   |
12 | import subprocess
13 | from pathlib import Path
14 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_e2e_run_id_and_determinism.py:29:45
   |
29 | def get_directory_hashes(directory: str) -> Dict[str, str]:
   |                                             ^^^^
30 |     """Get SHA256 hashes of all files in a directory."""
31 |     hashes = {}
   |
help: Replace with `dict`

B007 Loop control variable `dirs` not used within loop body
  --> tests/test_e2e_run_id_and_determinism.py:32:15
   |
30 |     """Get SHA256 hashes of all files in a directory."""
31 |     hashes = {}
32 |     for root, dirs, files in os.walk(directory):
   |               ^^^^
33 |         for file in files:
34 |             file_path = os.path.join(root, file)
   |
help: Rename unused `dirs` to `_dirs`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_e2e_run_id_and_determinism.py:44:6
   |
42 |     workers: int,
43 |     no_resume: bool = True,
44 | ) -> Dict[str, Any]:
   |      ^^^^
45 |     """Run pipeline and return run ID and output hashes."""
46 |     cmd = [
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_groups_pagination.py:9:1
   |
 7 | import os
 8 | import tempfile
 9 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | import pyarrow as pa
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_groups_pagination.py:9:1
   |
 7 | import os
 8 | import tempfile
 9 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |
11 | import pyarrow as pa
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:126:15
    |
124 |         """Test basic group stats computation."""
125 |         # Create test data
126 |         data: Dict[str, List[Any]] = {
    |               ^^^^
127 |             "group_id": ["group1", "group1", "group2", "group2", "group2"],
128 |             "account_name": [
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:126:25
    |
124 |         """Test basic group stats computation."""
125 |         # Create test data
126 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
127 |             "group_id": ["group1", "group1", "group2", "group2", "group2"],
128 |             "account_name": [
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:163:15
    |
161 |     def test_compute_group_stats_primary_names(self) -> None:
162 |         """Test primary name extraction."""
163 |         data: Dict[str, List[Any]] = {
    |               ^^^^
164 |             "group_id": ["group1", "group1"],
165 |             "account_name": ["Primary Company", "Secondary Company"],
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:163:25
    |
161 |     def test_compute_group_stats_primary_names(self) -> None:
162 |         """Test primary name extraction."""
163 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
164 |             "group_id": ["group1", "group1"],
165 |             "account_name": ["Primary Company", "Secondary Company"],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:180:15
    |
178 |     def test_compute_group_stats_no_primary(self) -> None:
179 |         """Test handling when no primary record exists."""
180 |         data: Dict[str, List[Any]] = {
    |               ^^^^
181 |             "group_id": ["group1", "group1"],
182 |             "account_name": ["Company A", "Company B"],
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:180:25
    |
178 |     def test_compute_group_stats_no_primary(self) -> None:
179 |         """Test handling when no primary record exists."""
180 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
181 |             "group_id": ["group1", "group1"],
182 |             "account_name": ["Company A", "Company B"],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:201:15
    |
199 |     def test_apply_filters_pyarrow_disposition(self) -> None:
200 |         """Test disposition filtering."""
201 |         data: Dict[str, List[Any]] = {
    |               ^^^^
202 |             "group_id": ["group1", "group2", "group3"],
203 |             "disposition": ["Keep", "Update", "Delete"],
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:201:25
    |
199 |     def test_apply_filters_pyarrow_disposition(self) -> None:
200 |         """Test disposition filtering."""
201 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
202 |             "group_id": ["group1", "group2", "group3"],
203 |             "disposition": ["Keep", "Update", "Delete"],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:218:15
    |
216 |     def test_apply_filters_pyarrow_edge_strength(self) -> None:
217 |         """Test edge strength filtering."""
218 |         data: Dict[str, List[Any]] = {
    |               ^^^^
219 |             "group_id": ["group1", "group2", "group3"],
220 |             "weakest_edge_to_primary": [95.0, 85.0, 75.0],
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:218:25
    |
216 |     def test_apply_filters_pyarrow_edge_strength(self) -> None:
217 |         """Test edge strength filtering."""
218 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
219 |             "group_id": ["group1", "group2", "group3"],
220 |             "weakest_edge_to_primary": [95.0, 85.0, 75.0],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:234:15
    |
232 |     def test_apply_filters_pyarrow_no_filters(self) -> None:
233 |         """Test that no filters returns original table."""
234 |         data: Dict[str, List[Any]] = {
    |               ^^^^
235 |             "group_id": ["group1", "group2"],
236 |             "weakest_edge_to_primary": [95.0, 85.0],
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:234:25
    |
232 |     def test_apply_filters_pyarrow_no_filters(self) -> None:
233 |         """Test that no filters returns original table."""
234 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
235 |             "group_id": ["group1", "group2"],
236 |             "weakest_edge_to_primary": [95.0, 85.0],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:240:18
    |
239 |         table = pa.Table.from_pydict(data)
240 |         filters: Dict[str, Any] = {}
    |                  ^^^^
241 |
242 |         filtered_table = apply_filters_pyarrow(table, filters)
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:254:25
    |
252 |         with tempfile.TemporaryDirectory() as temp_dir:
253 |             # Create empty parquet file
254 |             empty_data: Dict[str, list] = {
    |                         ^^^^
255 |                 "group_id": [],
256 |                 "account_name": [],
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:266:57
    |
265 |             # Mock artifact paths
266 |             def mock_get_artifact_paths(run_id: str) -> Dict[str, str]:
    |                                                         ^^^^
267 |                 return {"review_ready_parquet": parquet_path}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:296:15
    |
294 |         """Test pagination with page bounds."""
295 |         # Create test data with known number of groups
296 |         data: Dict[str, List[Any]] = {
    |               ^^^^
297 |             "group_id": [f"group{i}" for i in range(10)],
298 |             "account_name": [f"Company {i}" for i in range(10)],
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:296:25
    |
294 |         """Test pagination with page bounds."""
295 |         # Create test data with known number of groups
296 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
297 |             "group_id": [f"group{i}" for i in range(10)],
298 |             "account_name": [f"Company {i}" for i in range(10)],
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:309:57
    |
308 |             # Mock artifact paths
309 |             def mock_get_artifact_paths(run_id: str) -> Dict[str, str]:
    |                                                         ^^^^
310 |                 return {"review_ready_parquet": parquet_path}
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:367:15
    |
365 |         """Test that group_id tiebreaker ensures stable sorting."""
366 |         # Create test data with same values but different group_ids
367 |         data: Dict[str, List[Any]] = {
    |               ^^^^
368 |             "group_id": [
369 |                 "group_b",
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_groups_pagination.py:367:25
    |
365 |         """Test that group_id tiebreaker ensures stable sorting."""
366 |         # Create test data with same values but different group_ids
367 |         data: Dict[str, List[Any]] = {
    |                         ^^^^
368 |             "group_id": [
369 |                 "group_b",
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_groups_pagination.py:394:57
    |
393 |             # Mock artifact paths
394 |             def mock_get_artifact_paths(run_id: str) -> Dict[str, str]:
    |                                                         ^^^^
395 |                 return {"review_ready_parquet": parquet_path}
    |
help: Replace with `dict`

B007 Loop control variable `stage` not used within loop body
  --> tests/test_mini_dag_resume.py:63:13
   |
61 |         """Test intermediate file validation for complete pipeline."""
62 |         # Create all intermediate files
63 |         for stage, files in STAGE_INTERMEDIATE_FILES.items():
   |             ^^^^^
64 |             for filename in files:
65 |                 (interim_dir / filename).touch()
   |
help: Rename unused `stage` to `_stage`

B007 Loop control variable `stage` not used within loop body
   --> tests/test_mini_dag_resume.py:193:13
    |
191 |         """Test that resume validation completes within timeout."""
192 |         # Create a large number of files to test performance
193 |         for stage, files in STAGE_INTERMEDIATE_FILES.items():
    |             ^^^^^
194 |             for filename in files:
195 |                 (interim_dir / filename).touch()
    |
help: Rename unused `stage` to `_stage`

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_no_hardcoding.py:10:1
   |
 8 | import re
 9 | from pathlib import Path
10 | from typing import List
   | ^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | # Only scan these code roots for hardcoded values
   |

UP006 Use `list` instead of `List` for type annotation
  --> tests/test_no_hardcoding.py:77:49
   |
77 | def extract_string_literals(file_path: Path) -> List[tuple]:
   |                                                 ^^^^
78 |     """Extract string literals from Python file, excluding comments and docstrings."""
79 |     try:
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_no_hardcoding.py:100:57
    |
100 | def check_file_for_hardcoded_values(file_path: Path) -> List[dict]:
    |                                                         ^^^^
101 |     """Check a single file for hardcoded values."""
102 |     violations: list = []
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_no_hardcoding.py:147:28
    |
147 | def find_python_files() -> List[Path]:
    |                            ^^^^
148 |     """Find all Python files in the project."""
149 |     project_root = Path(__file__).parent.parent
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_no_hardcoding.py:150:19
    |
148 |     """Find all Python files in the project."""
149 |     project_root = Path(__file__).parent.parent
150 |     python_files: List[Path] = []
    |                   ^^^^
151 |
152 |     for root in CODE_ROOTS:
    |
help: Replace with `list`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_parallel_execution.py:10:1
   |
 8 | """
 9 |
10 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import pytest
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_parallel_execution.py:10:1
   |
 8 | """
 9 |
10 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |
12 | import pytest
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_parallel_execution.py:70:34
   |
68 |     test_items = list(range(100))
69 |
70 |     def test_function(x: int) -> Dict[str, Any]:
   |                                  ^^^^
71 |         """Test function that returns a dictionary."""
72 |         return {"value": x, "squared": x**2, "string": f"item_{x}"}
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_parallel_execution.py:110:34
    |
108 |     test_items = list(range(20))
109 |
110 |     def test_function(x: int) -> Dict[str, Any]:
    |                                  ^^^^
111 |         return {"input": x, "output": x * 3}
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_parallel_execution.py:136:30
    |
134 |     test_items = list(range(100))
135 |
136 |     def test_function(chunk: List[int]) -> List[Dict[str, Any]]:
    |                              ^^^^
137 |         return [{"value": x, "processed": True} for x in chunk]
    |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_parallel_execution.py:136:44
    |
134 |     test_items = list(range(100))
135 |
136 |     def test_function(chunk: List[int]) -> List[Dict[str, Any]]:
    |                                            ^^^^
137 |         return [{"value": x, "processed": True} for x in chunk]
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_parallel_execution.py:136:49
    |
134 |     test_items = list(range(100))
135 |
136 |     def test_function(chunk: List[int]) -> List[Dict[str, Any]]:
    |                                                 ^^^^
137 |         return [{"value": x, "processed": True} for x in chunk]
    |
help: Replace with `dict`

B017 Do not assert blind exception: `Exception`
   --> tests/test_parallel_execution.py:217:10
    |
216 |     # Should handle errors gracefully
217 |     with pytest.raises(Exception):
    |          ^^^^^^^^^^^^^^^^^^^^^^^^
218 |         executor.execute(failing_function, test_items, "test_error")
    |

UP035 `typing.Set` is deprecated, use `set` instead
 --> tests/test_readonly_safety.py:6:1
  |
4 | import os
5 | from pathlib import Path
6 | from typing import Set, Union
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | import pytest
  |

UP006 Use `set` instead of `Set` for type annotation
  --> tests/test_readonly_safety.py:11:37
   |
11 | def find_destructive_functions() -> Set[str]:
   |                                     ^^^
12 |     """Scan code for potentially destructive function calls that are NOT gated."""
13 |     destructive_patterns = {
   |
help: Replace with `set`

B007 Loop control variable `dirs` not used within loop body
  --> tests/test_readonly_safety.py:29:15
   |
28 |     # Scan all Python files in src/ and app/ directories
29 |     for root, dirs, files in os.walk("."):
   |               ^^^^
30 |         # Skip test files, deprecated, and other excluded directories
31 |         if any(
   |
help: Rename unused `dirs` to `_dirs`

UP006 Use `set` instead of `Set` for type annotation
   --> tests/test_readonly_safety.py:136:39
    |
136 | def find_direct_run_index_writes() -> Set[str]:
    |                                       ^^^
137 |     """Find direct writes to run_index.json that remove runs and are NOT gated."""
138 |     found_writes = set()
    |
help: Replace with `set`

B007 Loop control variable `dirs` not used within loop body
   --> tests/test_readonly_safety.py:140:15
    |
138 |     found_writes = set()
139 |
140 |     for root, dirs, files in os.walk("."):
    |               ^^^^
141 |         if any(
142 |             skip in root
    |
help: Rename unused `dirs` to `_dirs`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_run_maintenance_ui.py:3:1
  |
1 | """Tests for run maintenance UI confirmation logic."""
2 |
3 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | import pytest
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_run_maintenance_ui.py:22:19
   |
20 |     """Test that preview payload renders expected counts and bytes."""
21 |     # Mock preview data structure
22 |     preview_data: Dict[str, Any] = {
   |                   ^^^^
23 |         "runs_to_delete": [
24 |             {
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_run_maintenance_ui.py:64:20
   |
62 |     """Test preview payload edge cases."""
63 |     # Test empty preview
64 |     empty_preview: Dict[str, Any] = {
   |                    ^^^^
65 |         "runs_to_delete": [],
66 |         "runs_not_found": ["nonexistent_run"],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_run_maintenance_ui.py:78:23
   |
77 |     # Test inflight runs
78 |     inflight_preview: Dict[str, Any] = {
   |                       ^^^^
79 |         "runs_to_delete": [],
80 |         "runs_not_found": [],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_run_maintenance_ui.py:94:24
   |
92 |     """Test quick action session state structure (simplified confirmation)."""
93 |     # Test delete all runs action
94 |     delete_all_action: Dict[str, Any] = {
   |                        ^^^^
95 |         "type": "delete_all_runs",
96 |         "runs_to_delete": ["run1", "run2", "run3"],
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_run_maintenance_ui.py:104:34
    |
103 |     # Test delete all except latest action
104 |     delete_except_latest_action: Dict[str, Any] = {
    |                                  ^^^^
105 |         "type": "delete_all_except_latest",
106 |         "runs_to_delete": ["run1", "run2"],
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_bounds.py:13:1
   |
11 | import sys
12 | from pathlib import Path
13 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
14 |
15 | import numpy as np
   |

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_bulk_gate.py:11:1
   |
 9 | import sys
10 | from pathlib import Path
11 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_scoring_bulk_parity.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | import pandas as pd
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> tests/test_scoring_bulk_parity.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | import pandas as pd
   |

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_scoring_bulk_parity.py:306:26
    |
305 |         df_norm = normalize_dataframe(test_data, "Account Name")
306 |         candidate_pairs: List[Tuple[int, int]] = []  # Empty
    |                          ^^^^
307 |
308 |         settings = {
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> tests/test_scoring_bulk_parity.py:306:31
    |
305 |         df_norm = normalize_dataframe(test_data, "Account Name")
306 |         candidate_pairs: List[Tuple[int, int]] = []  # Empty
    |                               ^^^^^
307 |
308 |         settings = {
    |
help: Replace with `tuple`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_config_defaults.py:12:1
   |
10 | import sys
11 | from pathlib import Path
12 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_scoring_config_defaults.py:25:30
   |
25 | def _get_settings(overrides: Dict[str, Any] = None) -> Dict[str, Any]:
   |                              ^^^^
26 |     """Helper to create settings dict with optional overrides."""
27 |     settings = {
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_scoring_config_defaults.py:25:56
   |
25 | def _get_settings(overrides: Dict[str, Any] = None) -> Dict[str, Any]:
   |                                                        ^^^^
26 |     """Helper to create settings dict with optional overrides."""
27 |     settings = {
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_scoring_config_defaults.py:216:27
    |
215 |         # Test with minimal config (missing penalty and scoring sections)
216 |         minimal_settings: Dict[str, Any] = {"similarity": {}}
    |                           ^^^^
217 |         results_minimal = score_pairs_bulk(df_norm, candidate_pairs, minimal_settings)
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_scoring_config_defaults.py:238:25
    |
237 |         # Test with empty penalty and scoring sections
238 |         empty_settings: Dict[str, Any] = {"similarity": {"penalty": {}, "scoring": {}}}
    |                         ^^^^
239 |         results_empty = score_pairs_bulk(df_norm, candidate_pairs, empty_settings)
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_scoring_contracts.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | import pandas as pd
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> tests/test_scoring_contracts.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | import pandas as pd
   |

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_scoring_contracts.py:306:26
    |
305 |         df_norm = normalize_dataframe(test_data, "Account Name")
306 |         candidate_pairs: List[Tuple[int, int]] = []  # Empty
    |                          ^^^^
307 |         settings = _get_settings()
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> tests/test_scoring_contracts.py:306:31
    |
305 |         df_norm = normalize_dataframe(test_data, "Account Name")
306 |         candidate_pairs: List[Tuple[int, int]] = []  # Empty
    |                               ^^^^^
307 |         settings = _get_settings()
    |
help: Replace with `tuple`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_degenerate.py:12:1
   |
10 | import sys
11 | from pathlib import Path
12 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_logging.py:11:1
   |
 9 | import sys
10 | from pathlib import Path
11 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

F841 Local variable `results` is assigned to but never used
   --> tests/test_scoring_logging.py:109:9
    |
108 |         # Run bulk scoring
109 |         results = score_pairs_bulk(df_norm, candidate_pairs, settings)
    |         ^^^^^^^
110 |
111 |         # Should not have gate logs for empty candidates
    |
help: Remove assignment to unused variable `results`

F841 Local variable `results` is assigned to but never used
   --> tests/test_scoring_logging.py:139:13
    |
138 |             # Run bulk scoring
139 |             results = score_pairs_bulk(df_norm, candidate_pairs, settings)
    |             ^^^^^^^
140 |
141 |             # Collect gate log messages
    |
help: Remove assignment to unused variable `results`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_output_persistence.py:11:1
   |
 9 | import sys
10 | from pathlib import Path
11 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 |
13 | import pandas as pd
   |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   --> tests/test_scoring_output_persistence.py:214:24
    |
212 |               # Should have same data types
213 |               for key in bulk_result.keys():
214 |                   assert type(bulk_result[key]) == type(
    |  ________________________^
215 | |                     parallel_result[key]
216 | |                 ), f"Field '{key}' should have same type"
    | |_________________^
217 |
218 |       def test_output_empty_input(self):
    |

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tests/test_scoring_threshold_sort.py:12:1
   |
10 | import sys
11 | from pathlib import Path
12 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tests/test_scoring_threshold_sort.py:12:1
   |
10 | import sys
11 | from pathlib import Path
12 | from typing import Any, Dict, List
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 |
14 | import pandas as pd
   |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_scoring_threshold_sort.py:316:27
    |
315 |             # Group by score to test stability
316 |             score_groups: Dict[float, List[Dict[str, Any]]] = {}
    |                           ^^^^
317 |             for result in score_sorted:
318 |                 score = result["score"]
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tests/test_scoring_threshold_sort.py:316:39
    |
315 |             # Group by score to test stability
316 |             score_groups: Dict[float, List[Dict[str, Any]]] = {}
    |                                       ^^^^
317 |             for result in score_sorted:
318 |                 score = result["score"]
    |
help: Replace with `list`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_scoring_threshold_sort.py:316:44
    |
315 |             # Group by score to test stability
316 |             score_groups: Dict[float, List[Dict[str, Any]]] = {}
    |                                            ^^^^
317 |             for result in score_sorted:
318 |                 score = result["score"]
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_similarity.py:3:1
  |
1 | """Test similarity computation functionality."""
2 |
3 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |
5 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_similarity.py:63:19
   |
61 |         self,
62 |         sample_data: Any,
63 |         settings: Dict[str, Any],
   |                   ^^^^
64 |     ) -> None:
65 |         """Test that candidate pairs are generated correctly."""
   |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_similarity_refactor.py:5:1
  |
3 | import sys
4 | from pathlib import Path
5 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 |
7 | import pandas as pd
  |

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_similarity_refactor.py:123:19
    |
121 |     def test_get_stop_tokens_default(self):
122 |         """Test that default stop tokens are used when not in config."""
123 |         settings: Dict[str, Any] = {"similarity": {"blocking": {}}}
    |                   ^^^^
124 |
125 |         stop_tokens = get_stop_tokens(settings)
    |
help: Replace with `dict`

UP035 `typing.Dict` is deprecated, use `dict` instead
 --> tests/test_state_utils.py:6:1
  |
4 | """
5 |
6 | from typing import Any, Dict
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |
8 | from src.utils.state_utils import (
  |

UP006 Use `dict` instead of `Dict` for type annotation
  --> tests/test_state_utils.py:83:20
   |
81 | def test_get_set_page_state() -> None:
82 |     """Test get_page_state and set_page_state functions."""
83 |     session_state: Dict[str, Any] = {}
   |                    ^^^^
84 |
85 |     # Test defaults
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:99:20
    |
 97 | def test_get_set_backend_state() -> None:
 98 |     """Test get_backend_state and set_backend_state functions."""
 99 |     session_state: Dict[str, Any] = {}
    |                    ^^^^
100 |
101 |     # Test defaults
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:113:20
    |
111 | def test_get_set_details_state() -> None:
112 |     """Test get_details_state and set_details_state functions."""
113 |     session_state: Dict[str, Any] = {}
    |                    ^^^^
114 |
115 |     # Test defaults
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:132:20
    |
130 | def test_get_set_explain_state() -> None:
131 |     """Test get_explain_state and set_explain_state functions."""
132 |     session_state: Dict[str, Any] = {}
    |                    ^^^^
133 |
134 |     # Test defaults
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:151:20
    |
149 | def test_get_set_aliases_state() -> None:
150 |     """Test get_aliases_state and set_aliases_state functions."""
151 |     session_state: Dict[str, Any] = {}
    |                    ^^^^
152 |
153 |     # Test defaults
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:170:20
    |
168 | def test_get_set_filters_state() -> None:
169 |     """Test get_filters_state and set_filters_state functions."""
170 |     session_state: Dict[str, Any] = {}
    |                    ^^^^
171 |
172 |     # Test defaults
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:184:20
    |
182 | def test_get_set_cache_state() -> None:
183 |     """Test get_cache_state and set_cache_state functions."""
184 |     session_state: Dict[str, Any] = {}
    |                    ^^^^
185 |
186 |     # Test defaults
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:198:20
    |
196 | def test_migrate_legacy_keys() -> None:
197 |     """Test migrate_legacy_keys function."""
198 |     session_state: Dict[str, Any] = {
    |                    ^^^^
199 |         "page": 5,
200 |         "groups_backend": {"run1": "duckdb"},
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tests/test_state_utils.py:213:20
    |
211 | def test_clear_legacy_keys() -> None:
212 |     """Test clear_legacy_keys function."""
213 |     session_state: Dict[str, Any] = {
    |                    ^^^^
214 |         "page": 5,
215 |         "groups_backend": {"run1": "duckdb"},
    |
help: Replace with `dict`

UP035 `typing.List` is deprecated, use `list` instead
  --> tools/audit_schema_fragile_refs.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | # Schema-fragile column names to search for
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> tools/audit_schema_fragile_refs.py:14:1
   |
12 | import sys
13 | from pathlib import Path
14 | from typing import List, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |
16 | # Schema-fragile column names to search for
   |

UP006 Use `list` instead of `List` for type annotation
   --> tools/audit_schema_fragile_refs.py:141:49
    |
141 | def find_fragile_references(file_path: Path) -> List[Tuple[int, str]]:
    |                                                 ^^^^
142 |     """Find schema-fragile references in a file."""
143 |     references = []
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> tools/audit_schema_fragile_refs.py:141:54
    |
141 | def find_fragile_references(file_path: Path) -> List[Tuple[int, str]]:
    |                                                      ^^^^^
142 |     """Find schema-fragile references in a file."""
143 |     references = []
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> tools/audit_schema_fragile_refs.py:165:41
    |
165 | def audit_directory(directory: Path) -> List[Tuple[Path, int, str]]:
    |                                         ^^^^
166 |     """Audit a directory for schema-fragile references."""
167 |     all_references: list[tuple[Path, int, str]] = []
    |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> tools/audit_schema_fragile_refs.py:165:46
    |
165 | def audit_directory(directory: Path) -> List[Tuple[Path, int, str]]:
    |                                              ^^^^^
166 |     """Audit a directory for schema-fragile references."""
167 |     all_references: list[tuple[Path, int, str]] = []
    |
help: Replace with `tuple`

UP035 `typing.Dict` is deprecated, use `dict` instead
  --> tools/cleanup_test_artifacts.py:24:1
   |
22 | from datetime import datetime
23 | from pathlib import Path
24 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |
26 | # Add src to path for imports
   |

UP035 `typing.List` is deprecated, use `list` instead
  --> tools/cleanup_test_artifacts.py:24:1
   |
22 | from datetime import datetime
23 | from pathlib import Path
24 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |
26 | # Add src to path for imports
   |

UP035 `typing.Set` is deprecated, use `set` instead
  --> tools/cleanup_test_artifacts.py:24:1
   |
22 | from datetime import datetime
23 | from pathlib import Path
24 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |
26 | # Add src to path for imports
   |

UP035 `typing.Tuple` is deprecated, use `tuple` instead
  --> tools/cleanup_test_artifacts.py:24:1
   |
22 | from datetime import datetime
23 | from pathlib import Path
24 | from typing import Any, Dict, List, Optional, Set, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
25 |
26 | # Add src to path for imports
   |

UP006 Use `list` instead of `List` for type annotation
  --> tools/cleanup_test_artifacts.py:39:26
   |
38 |     def __init__(self) -> None:
39 |         self.candidates: List[Tuple[str, Dict[str, Any], str]] = (
   |                          ^^^^
40 |             []
41 |         )  # (run_id, run_data, reason)
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> tools/cleanup_test_artifacts.py:39:31
   |
38 |     def __init__(self) -> None:
39 |         self.candidates: List[Tuple[str, Dict[str, Any], str]] = (
   |                               ^^^^^
40 |             []
41 |         )  # (run_id, run_data, reason)
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tools/cleanup_test_artifacts.py:39:42
   |
38 |     def __init__(self) -> None:
39 |         self.candidates: List[Tuple[str, Dict[str, Any], str]] = (
   |                                          ^^^^
40 |             []
41 |         )  # (run_id, run_data, reason)
   |
help: Replace with `dict`

UP006 Use `set` instead of `Set` for type annotation
  --> tools/cleanup_test_artifacts.py:43:27
   |
41 |         )  # (run_id, run_data, reason)
42 |         self.latest_run_id: Optional[str] = None
43 |         self.pinned_runs: Set[str] = set()
   |                           ^^^
44 |         self.prod_runs: Set[str] = set()
   |
help: Replace with `set`

UP006 Use `set` instead of `Set` for type annotation
  --> tools/cleanup_test_artifacts.py:44:25
   |
42 |         self.latest_run_id: Optional[str] = None
43 |         self.pinned_runs: Set[str] = set()
44 |         self.prod_runs: Set[str] = set()
   |                         ^^^
45 |
46 |     def add_candidate(self, run_id: str, run_data: Dict[str, Any], reason: str) -> None:
   |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tools/cleanup_test_artifacts.py:46:52
   |
44 |         self.prod_runs: Set[str] = set()
45 |
46 |     def add_candidate(self, run_id: str, run_data: Dict[str, Any], reason: str) -> None:
   |                                                    ^^^^
47 |         """Add a run to the cleanup candidates."""
48 |         self.candidates.append((run_id, run_data, reason))
   |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
  --> tools/cleanup_test_artifacts.py:58:43
   |
56 |         )
57 |
58 |     def get_protected_candidates(self) -> List[str]:
   |                                           ^^^^
59 |         """Get list of protected candidates that would be excluded."""
60 |         return [run_id for run_id, _, _ in self.candidates if self.is_protected(run_id)]
   |
help: Replace with `list`

UP006 Use `list` instead of `List` for type annotation
  --> tools/cleanup_test_artifacts.py:62:43
   |
60 |         return [run_id for run_id, _, _ in self.candidates if self.is_protected(run_id)]
61 |
62 |     def get_deletable_candidates(self) -> List[Tuple[str, Dict[str, Any], str]]:
   |                                           ^^^^
63 |         """Get list of candidates that can actually be deleted."""
64 |         return [
   |
help: Replace with `list`

UP006 Use `tuple` instead of `Tuple` for type annotation
  --> tools/cleanup_test_artifacts.py:62:48
   |
60 |         return [run_id for run_id, _, _ in self.candidates if self.is_protected(run_id)]
61 |
62 |     def get_deletable_candidates(self) -> List[Tuple[str, Dict[str, Any], str]]:
   |                                                ^^^^^
63 |         """Get list of candidates that can actually be deleted."""
64 |         return [
   |
help: Replace with `tuple`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tools/cleanup_test_artifacts.py:62:59
   |
60 |         return [run_id for run_id, _, _ in self.candidates if self.is_protected(run_id)]
61 |
62 |     def get_deletable_candidates(self) -> List[Tuple[str, Dict[str, Any], str]]:
   |                                                           ^^^^
63 |         """Get list of candidates that can actually be deleted."""
64 |         return [
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tools/cleanup_test_artifacts.py:75:25
   |
75 | def load_run_index() -> Dict[str, Any]:
   |                         ^^^^
76 |     """Load the run index file."""
77 |     index_path = Path(str(get_processed_dir("index") / "run_index.json"))
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
  --> tools/cleanup_test_artifacts.py:93:31
   |
93 | def save_run_index(run_index: Dict[str, Any]) -> None:
   |                               ^^^^
94 |     """Save the run index file atomically."""
95 |     index_path = Path(str(get_processed_dir("index") / "run_index.json"))
   |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tools/cleanup_test_artifacts.py:154:31
    |
154 | def detect_run_type(run_data: Dict[str, Any]) -> str:
    |                               ^^^^
155 |     """Detect run type from existing metadata (heuristic for MVP)."""
156 |     # Check input paths for test indicators
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tools/cleanup_test_artifacts.py:170:32
    |
170 | def get_run_age_days(run_data: Dict[str, Any]) -> int:
    |                                ^^^^
171 |     """Get the age of a run in days."""
172 |     timestamp_str = run_data.get("timestamp", "")
    |
help: Replace with `dict`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tools/cleanup_test_artifacts.py:186:16
    |
185 | def discover_candidates(
186 |     run_index: Dict[str, Any],
    |                ^^^^
187 |     types: Optional[List[str]] = None,
188 |     older_than: Optional[int] = None,
    |
help: Replace with `dict`

UP006 Use `list` instead of `List` for type annotation
   --> tools/cleanup_test_artifacts.py:187:21
    |
185 | def discover_candidates(
186 |     run_index: Dict[str, Any],
187 |     types: Optional[List[str]] = None,
    |                     ^^^^
188 |     older_than: Optional[int] = None,
189 |     prod_sweep: bool = False,
    |
help: Replace with `list`

UP006 Use `set` instead of `Set` for type annotation
   --> tools/cleanup_test_artifacts.py:191:21
    |
189 |     prod_sweep: bool = False,
190 |     include_prod: bool = False,
191 |     pinned_run_ids: Set[str] | None = None,
    |                     ^^^
192 |     reconcile: bool = False,
193 | ) -> CleanupPlan:
    |
help: Replace with `set`

UP006 Use `dict` instead of `Dict` for type annotation
   --> tools/cleanup_test_artifacts.py:344:16
    |
342 | def execute_cleanup(
343 |     plan: CleanupPlan,
344 |     run_index: Dict[str, Any],
    |                ^^^^
345 | ) -> Tuple[List[str], int]:
346 |     """Execute the cleanup plan.
    |
help: Replace with `dict`

UP006 Use `tuple` instead of `Tuple` for type annotation
   --> tools/cleanup_test_artifacts.py:345:6
    |
343 |     plan: CleanupPlan,
344 |     run_index: Dict[str, Any],
345 | ) -> Tuple[List[str], int]:
    |      ^^^^^
346 |     """Execute the cleanup plan.
    |
help: Replace with `tuple`

UP006 Use `list` instead of `List` for type annotation
   --> tools/cleanup_test_artifacts.py:345:12
    |
343 |     plan: CleanupPlan,
344 |     run_index: Dict[str, Any],
345 | ) -> Tuple[List[str], int]:
    |            ^^^^
346 |     """Execute the cleanup plan.
    |
help: Replace with `list`

B007 Loop control variable `run_data` not used within loop body
   --> tools/cleanup_test_artifacts.py:359:17
    |
357 |     logger.info(f"Executing cleanup for {len(deletable_candidates)} runs...")
358 |
359 |     for run_id, run_data, reason in deletable_candidates:
    |                 ^^^^^^^^
360 |         if reason == "stale_index":
361 |             # Only remove from index
    |
help: Rename unused `run_data` to `_run_data`

Found 845 errors.
No fixes available (662 hidden fixes can be enabled with the `--unsafe-fixes` option).
